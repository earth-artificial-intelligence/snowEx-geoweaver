[{
  "history_id" : "p2j4fvswp9Mk",
  "history_input" : "from snowex_nsidc_search import * \n\n\n\n#Set NSIDC data access base URL\nbase_url = 'https://n5eil02u.ecs.nsidc.org/egi/request'\n\n#Set the request mode to asynchronous, \"no\" processing agent (no subsetting or reformatting services available), and optionally removing metadata delivery\n\nparam_dict['request_mode'] = 'async'\nparam_dict['agent'] = 'NO'\nparam_dict['INCLUDE_META'] ='N' #optional if you do not wish to receive the associated metadata files with each science file. \n\nparam_string = '&'.join(\"{!s}={!r}\".format(k,v) for (k,v) in param_dict.items()) # Convert param_dict to string\nparam_string = param_string.replace(\"'\",\"\") # Remove quotes\n\napi_list = [f'{base_url}?{param_string}']\napi_request = api_list[0]\nprint(api_request) # Print API base URL + request parameters\n\n# Start authenticated session with Earthdata Login to allow for data downloads:\ndef setup_earthdata_login_auth(endpoint: str='urs.earthdata.nasa.gov'):\n    netrc_name = \"_netrc\" if system()==\"Windows\" else \".netrc\"\n    try:\n        username, _, password = netrc.netrc(file=join(expanduser('~'), netrc_name)).authenticators(endpoint)\n    except (FileNotFoundError, TypeError):\n        print('Please provide your Earthdata Login credentials for access.')\n        print('Your info will only be passed to %s and will not be exposed in Jupyter.' % (endpoint))\n        username = input('Username: ')\n        password = getpass('Password: ')\n    manager = request.HTTPPasswordMgrWithDefaultRealm()\n    manager.add_password(None, endpoint, username, password)\n    auth = request.HTTPBasicAuthHandler(manager)\n    jar = CookieJar()\n    processor = request.HTTPCookieProcessor(jar)\n    opener = request.build_opener(auth, processor)\n    request.install_opener(opener)\n\nsetup_earthdata_login_auth(endpoint=\"urs.earthdata.nasa.gov\")\n\n\ndef request_nsidc_data(API_request):\n    \"\"\"\n    Performs a data customization and access request from NSIDC's API/\n    Creates an output folder in the working directory if one does not already exist.\n    \n    :API_request: NSIDC API endpoint; see https://nsidc.org/support/how/how-do-i-programmatically-request-data-services for more info\n    on how to configure the API request.\n    \n    \"\"\"\n\n    path = str(f'{datadir}') # Create an output folder if the folder does not already exist.\n    if not os.path.exists(path):\n        os.mkdir(path)\n        \n    base_url = 'https://n5eil02u.ecs.nsidc.org/egi/request'\n\n    \n    r = request.urlopen(API_request)\n    esir_root = ET.fromstring(r.read())\n    orderlist = []   # Look up order ID\n    for order in esir_root.findall(\"./order/\"):\n        orderlist.append(order.text)\n    orderID = orderlist[0]\n    statusURL = base_url + '/' + orderID # Create status URL\n    print('Order status URL: ', statusURL)\n    request_response = request.urlopen(statusURL) # Find order status  \n    request_root = ET.fromstring(request_response.read())\n    statuslist = []\n    for status in request_root.findall(\"./requestStatus/\"):\n        statuslist.append(status.text)\n    status = statuslist[0]\n    while status == 'pending' or status == 'processing': #Continue loop while request is still processing\n        print('Job status is ', status,'. Trying again.')\n        time.sleep(10)\n        loop_response = request.urlopen(statusURL)\n        loop_root = ET.fromstring(loop_response.read())\n        statuslist = [] #find status\n        for status in loop_root.findall(\"./requestStatus/\"):\n            statuslist.append(status.text)\n        status = statuslist[0]\n        if status == 'pending' or status == 'processing':\n            continue\n    if status == 'complete_with_errors' or status == 'failed': # Provide complete_with_errors error message:\n        messagelist = []\n        for message in loop_root.findall(\"./processInfo/\"):\n            messagelist.append(message.text)\n        print('Job status is ', status)\n        print('error messages:')\n        pprint(messagelist)\n    if status == 'complete' or status == 'complete_with_errors':# Download zipped order if status is complete or complete_with_errors\n        downloadURL = 'https://n5eil02u.ecs.nsidc.org/esir/' + orderID + '.zip'\n        print('Job status is ', status)\n        print('Zip download URL: ', downloadURL)\n        print('Beginning download of zipped output...')\n        zip_response = request.urlopen(downloadURL)\n        with zipfile.ZipFile(io.BytesIO(zip_response.read())) as z:\n            z.extractall(path)\n        print('Download is complete.')\n    else: print('Request failed.')\n    \n    # Clean up Outputs folder by removing individual granule folders \n    for root, dirs, files in os.walk(path, topdown=False):\n        for file in files:\n            try:\n                shutil.move(os.path.join(root, file), path)\n            except OSError:\n                pass\n        for name in dirs:\n            os.rmdir(os.path.join(root, name))\n    return  \n\n\n# NOTE: downloads ~ 200MB of CSV files\nrequest_nsidc_data(api_request)",
  "history_output" : "Polygon coordinates to be used in search: -108.28812429263995,38.9376560601842,-107.76084551933717,38.93217823859049,-107.75873173540937,39.16610050975101,-108.25202140957613,39.169195040825244,-108.28812429263995,38.9376560601842\nFound 3 files\nThe total size of all files is 209.20 MB\n{'feed': {'updated': '2022-07-10T22:07:41.290Z', 'id': 'https://cmr.earthdata.nasa.gov:443/search/granules.json?short_name=SNEX17_GPR&version=2&polygon=-108.28812429263995%2C38.9376560601842%2C-107.76084551933717%2C38.93217823859049%2C-107.75873173540937%2C39.16610050975101%2C-108.25202140957613%2C39.169195040825244%2C-108.28812429263995%2C38.9376560601842&temporal=2017-01-01T00%3A00%3A00Z%2C2017-12-31T23%3A59%3A59Z', 'title': 'ECHO granule metadata', 'entry': [{'producer_granule_id': 'SnowEx17_GPR_Version2_Week1.csv', 'time_start': '2017-02-08T00:00:00.000Z', 'updated': '2019-11-20T14:19:39.156Z', 'dataset_id': 'SnowEx17 Ground Penetrating Radar V002', 'data_center': 'NSIDC_ECS', 'title': 'SC:SNEX17_GPR.002:167128516', 'coordinate_system': 'GEODETIC', 'day_night_flag': 'UNSPECIFIED', 'time_end': '2017-02-10T23:59:59.000Z', 'id': 'G1657541380-NSIDC_ECS', 'original_format': 'ECHO10', 'granule_size': '57.3195', 'browse_flag': False, 'polygons': [['39.05189 -108.06789 39.04958 -108.07092 39.02644 -108.13422 39.04032 -108.18504 39.0357 -108.2211 39.01719 -108.21534 38.99637 -108.18261 39.00562 -108.11049 39.02413 -108.06225 39.03338 -108.06213 39.02876 -108.08619 39.04264 -108.05301 39.05189 -108.05289 39.0542 -108.06786 39.05189 -108.06789']], 'collection_concept_id': 'C1655875737-NSIDC_ECS', 'online_access_flag': True, 'links': [{'rel': 'http://esipfed.org/ns/fedsearch/1.1/data#', 'type': 'text/plain', 'hreflang': 'en-US', 'href': 'https://n5eil01u.ecs.nsidc.org/DP1/SNOWEX/SNEX17_GPR.002/2017.02.08/SnowEx17_GPR_Version2_Week1.csv'}, {'rel': 'http://esipfed.org/ns/fedsearch/1.1/metadata#', 'type': 'text/xml', 'title': '(METADATA)', 'hreflang': 'en-US', 'href': 'https://n5eil01u.ecs.nsidc.org/DP1/SNOWEX/SNEX17_GPR.002/2017.02.08/SnowEx17_GPR_Version2_Week1.csv.xml'}, {'inherited': True, 'length': '0.0KB', 'rel': 'http://esipfed.org/ns/fedsearch/1.1/data#', 'hreflang': 'en-US', 'href': 'https://n5eil01u.ecs.nsidc.org/SNOWEX/SNEX17_GPR.002/'}, {'inherited': True, 'length': '0.0KB', 'rel': 'http://esipfed.org/ns/fedsearch/1.1/data#', 'hreflang': 'en-US', 'href': 'https://search.earthdata.nasa.gov/search/granules?p=C1655875737-NSIDC_ECS&q=SNEX17_GPR&m=29.76382409255042!-108.823974609375!4!1!0!0%2C2&tl=1558474061!4!!'}, {'inherited': True, 'length': '0.0KB', 'rel': 'http://esipfed.org/ns/fedsearch/1.1/data#', 'hreflang': 'en-US', 'href': 'https://nsidc.org/data/data-access-tool/SNEX17_GPR/versions/2/'}, {'inherited': True, 'rel': 'http://esipfed.org/ns/fedsearch/1.1/metadata#', 'hreflang': 'en-US', 'href': 'https://doi.org/10.5067/G21LGCNLFSC5'}, {'inherited': True, 'rel': 'http://esipfed.org/ns/fedsearch/1.1/documentation#', 'hreflang': 'en-US', 'href': 'https://doi.org/10.5067/G21LGCNLFSC5'}]}, {'producer_granule_id': 'SnowEx17_GPR_Version2_Week2.csv', 'time_start': '2017-02-14T00:00:00.000Z', 'updated': '2019-11-20T14:19:39.156Z', 'dataset_id': 'SnowEx17 Ground Penetrating Radar V002', 'data_center': 'NSIDC_ECS', 'title': 'SC:SNEX17_GPR.002:167128520', 'coordinate_system': 'GEODETIC', 'day_night_flag': 'UNSPECIFIED', 'time_end': '2017-02-17T23:59:59.000Z', 'id': 'G1657541238-NSIDC_ECS', 'original_format': 'ECHO10', 'granule_size': '85.516', 'browse_flag': False, 'polygons': [['39.10738 -107.88943 39.10738 -107.89539 39.0912 -107.95508 39.07271 -108.02372 39.0542 -108.09234 39.04264 -108.16078 39.0357 -108.2113 39.03338 -108.2113 39.0195 -108.20533 39.00099 -108.18454 39.00099 -108.12811 39.00099 -108.08653 39.02644 -108.02094 39.0357 -107.94938 39.02413 -107.93155 39.04726 -107.89867 39.08195 -107.85677 39.10507 -107.86257 39.10969 -107.88644 39.10738 -107.88943']], 'collection_concept_id': 'C1655875737-NSIDC_ECS', 'online_access_flag': True, 'links': [{'rel': 'http://esipfed.org/ns/fedsearch/1.1/data#', 'type': 'text/plain', 'hreflang': 'en-US', 'href': 'https://n5eil01u.ecs.nsidc.org/DP1/SNOWEX/SNEX17_GPR.002/2017.02.14/SnowEx17_GPR_Version2_Week2.csv'}, {'rel': 'http://esipfed.org/ns/fedsearch/1.1/metadata#', 'type': 'text/xml', 'title': '(METADATA)', 'hreflang': 'en-US', 'href': 'https://n5eil01u.ecs.nsidc.org/DP1/SNOWEX/SNEX17_GPR.002/2017.02.14/SnowEx17_GPR_Version2_Week2.csv.xml'}, {'inherited': True, 'length': '0.0KB', 'rel': 'http://esipfed.org/ns/fedsearch/1.1/data#', 'hreflang': 'en-US', 'href': 'https://n5eil01u.ecs.nsidc.org/SNOWEX/SNEX17_GPR.002/'}, {'inherited': True, 'length': '0.0KB', 'rel': 'http://esipfed.org/ns/fedsearch/1.1/data#', 'hreflang': 'en-US', 'href': 'https://search.earthdata.nasa.gov/search/granules?p=C1655875737-NSIDC_ECS&q=SNEX17_GPR&m=29.76382409255042!-108.823974609375!4!1!0!0%2C2&tl=1558474061!4!!'}, {'inherited': True, 'length': '0.0KB', 'rel': 'http://esipfed.org/ns/fedsearch/1.1/data#', 'hreflang': 'en-US', 'href': 'https://nsidc.org/data/data-access-tool/SNEX17_GPR/versions/2/'}, {'inherited': True, 'rel': 'http://esipfed.org/ns/fedsearch/1.1/metadata#', 'hreflang': 'en-US', 'href': 'https://doi.org/10.5067/G21LGCNLFSC5'}, {'inherited': True, 'rel': 'http://esipfed.org/ns/fedsearch/1.1/documentation#', 'hreflang': 'en-US', 'href': 'https://doi.org/10.5067/G21LGCNLFSC5'}]}, {'producer_granule_id': 'SnowEx17_GPR_Version2_Week3.csv', 'time_start': '2017-02-21T00:00:00.000Z', 'updated': '2020-02-18T12:25:16.785Z', 'dataset_id': 'SnowEx17 Ground Penetrating Radar V002', 'data_center': 'NSIDC_ECS', 'title': 'SC:SNEX17_GPR.002:173252482', 'coordinate_system': 'GEODETIC', 'day_night_flag': 'UNSPECIFIED', 'time_end': '2017-02-25T23:59:59.000Z', 'id': 'G1694922459-NSIDC_ECS', 'original_format': 'ECHO10', 'granule_size': '66.3598', 'browse_flag': False, 'polygons': [['39.05189 -108.06789 39.04958 -108.06792 39.03107 -108.08616 39.0195 -108.15531 39.00331 -108.14352 39.00562 -108.11049 39.00562 -108.05349 39.01719 -108.05334 39.02876 -108.02919 39.0542 -108.05586 39.0542 -108.06786 39.05189 -108.06789']], 'collection_concept_id': 'C1655875737-NSIDC_ECS', 'online_access_flag': True, 'links': [{'rel': 'http://esipfed.org/ns/fedsearch/1.1/data#', 'type': 'text/plain', 'hreflang': 'en-US', 'href': 'https://n5eil01u.ecs.nsidc.org/DP1/SNOWEX/SNEX17_GPR.002/2017.02.21/SnowEx17_GPR_Version2_Week3.csv'}, {'rel': 'http://esipfed.org/ns/fedsearch/1.1/metadata#', 'type': 'text/xml', 'title': '(METADATA)', 'hreflang': 'en-US', 'href': 'https://n5eil01u.ecs.nsidc.org/DP1/SNOWEX/SNEX17_GPR.002/2017.02.21/SnowEx17_GPR_Version2_Week3.csv.xml'}, {'inherited': True, 'length': '0.0KB', 'rel': 'http://esipfed.org/ns/fedsearch/1.1/data#', 'hreflang': 'en-US', 'href': 'https://n5eil01u.ecs.nsidc.org/SNOWEX/SNEX17_GPR.002/'}, {'inherited': True, 'length': '0.0KB', 'rel': 'http://esipfed.org/ns/fedsearch/1.1/data#', 'hreflang': 'en-US', 'href': 'https://search.earthdata.nasa.gov/search/granules?p=C1655875737-NSIDC_ECS&q=SNEX17_GPR&m=29.76382409255042!-108.823974609375!4!1!0!0%2C2&tl=1558474061!4!!'}, {'inherited': True, 'length': '0.0KB', 'rel': 'http://esipfed.org/ns/fedsearch/1.1/data#', 'hreflang': 'en-US', 'href': 'https://nsidc.org/data/data-access-tool/SNEX17_GPR/versions/2/'}, {'inherited': True, 'rel': 'http://esipfed.org/ns/fedsearch/1.1/metadata#', 'hreflang': 'en-US', 'href': 'https://doi.org/10.5067/G21LGCNLFSC5'}, {'inherited': True, 'rel': 'http://esipfed.org/ns/fedsearch/1.1/documentation#', 'hreflang': 'en-US', 'href': 'https://doi.org/10.5067/G21LGCNLFSC5'}]}]}}\nhttps://n5eil02u.ecs.nsidc.org/egi/request?short_name=SNEX17_GPR&version=2&polygon=-108.28812429263995,38.9376560601842,-107.76084551933717,38.93217823859049,-107.75873173540937,39.16610050975101,-108.25202140957613,39.169195040825244,-108.28812429263995,38.9376560601842&temporal=2017-01-01T00:00:00Z,2017-12-31T23:59:59Z&request_mode=async&agent=NO&INCLUDE_META=N\nOrder status URL:  https://n5eil02u.ecs.nsidc.org/egi/request/5000003323188\nJob status is  complete\nZip download URL:  https://n5eil02u.ecs.nsidc.org/esir/5000003323188.zip\nBeginning download of zipped output...\nDownload is complete.\n",
  "history_begin_time" : 1657490860078,
  "history_end_time" : 1657490891571,
  "history_notes" : null,
  "history_process" : "li3z29",
  "host_id" : null,
  "indicator" : "Done"
},{
  "history_id" : "EkrNtM5vuttw",
  "history_input" : "from snowex_nsidc_search import * \n\n\n\n#Set NSIDC data access base URL\nbase_url = 'https://n5eil02u.ecs.nsidc.org/egi/request'\n\n#Set the request mode to asynchronous, \"no\" processing agent (no subsetting or reformatting services available), and optionally removing metadata delivery\n\nparam_dict['request_mode'] = 'async'\nparam_dict['agent'] = 'NO'\nparam_dict['INCLUDE_META'] ='N' #optional if you do not wish to receive the associated metadata files with each science file. \n\nparam_string = '&'.join(\"{!s}={!r}\".format(k,v) for (k,v) in param_dict.items()) # Convert param_dict to string\nparam_string = param_string.replace(\"'\",\"\") # Remove quotes\n\napi_list = [f'{base_url}?{param_string}']\napi_request = api_list[0]\nprint(api_request) # Print API base URL + request parameters\n\n# Start authenticated session with Earthdata Login to allow for data downloads:\ndef setup_earthdata_login_auth(endpoint: str='urs.earthdata.nasa.gov'):\n    netrc_name = \"_netrc\" if system()==\"Windows\" else \".netrc\"\n    try:\n        username, _, password = netrc.netrc(file=join(expanduser('~'), netrc_name)).authenticators(endpoint)\n    except (FileNotFoundError, TypeError):\n        print('Please provide your Earthdata Login credentials for access.')\n        print('Your info will only be passed to %s and will not be exposed in Jupyter.' % (endpoint))\n        username = input('Username: ')\n        password = getpass('Password: ')\n    manager = request.HTTPPasswordMgrWithDefaultRealm()\n    manager.add_password(None, endpoint, username, password)\n    auth = request.HTTPBasicAuthHandler(manager)\n    jar = CookieJar()\n    processor = request.HTTPCookieProcessor(jar)\n    opener = request.build_opener(auth, processor)\n    request.install_opener(opener)\n\nsetup_earthdata_login_auth(endpoint=\"urs.earthdata.nasa.gov\")\n\n\ndef request_nsidc_data(API_request):\n    \"\"\"\n    Performs a data customization and access request from NSIDC's API/\n    Creates an output folder in the working directory if one does not already exist.\n    \n    :API_request: NSIDC API endpoint; see https://nsidc.org/support/how/how-do-i-programmatically-request-data-services for more info\n    on how to configure the API request.\n    \n    \"\"\"\n\n    path = str(f'{datadir}') # Create an output folder if the folder does not already exist.\n    if not os.path.exists(path):\n        os.mkdir(path)\n        \n    base_url = 'https://n5eil02u.ecs.nsidc.org/egi/request'\n\n    \n    r = request.urlopen(API_request)\n    esir_root = ET.fromstring(r.read())\n    orderlist = []   # Look up order ID\n    for order in esir_root.findall(\"./order/\"):\n        orderlist.append(order.text)\n    orderID = orderlist[0]\n    statusURL = base_url + '/' + orderID # Create status URL\n    print('Order status URL: ', statusURL)\n    request_response = request.urlopen(statusURL) # Find order status  \n    request_root = ET.fromstring(request_response.read())\n    statuslist = []\n    for status in request_root.findall(\"./requestStatus/\"):\n        statuslist.append(status.text)\n    status = statuslist[0]\n    while status == 'pending' or status == 'processing': #Continue loop while request is still processing\n        print('Job status is ', status,'. Trying again.')\n        time.sleep(10)\n        loop_response = request.urlopen(statusURL)\n        loop_root = ET.fromstring(loop_response.read())\n        statuslist = [] #find status\n        for status in loop_root.findall(\"./requestStatus/\"):\n            statuslist.append(status.text)\n        status = statuslist[0]\n        if status == 'pending' or status == 'processing':\n            continue\n    if status == 'complete_with_errors' or status == 'failed': # Provide complete_with_errors error message:\n        messagelist = []\n        for message in loop_root.findall(\"./processInfo/\"):\n            messagelist.append(message.text)\n        print('Job status is ', status)\n        print('error messages:')\n        pprint(messagelist)\n    if status == 'complete' or status == 'complete_with_errors':# Download zipped order if status is complete or complete_with_errors\n        downloadURL = 'https://n5eil02u.ecs.nsidc.org/esir/' + orderID + '.zip'\n        print('Job status is ', status)\n        print('Zip download URL: ', downloadURL)\n        print('Beginning download of zipped output...')\n        zip_response = request.urlopen(downloadURL)\n        with zipfile.ZipFile(io.BytesIO(zip_response.read())) as z:\n            z.extractall(path)\n        print('Download is complete.')\n    else: print('Request failed.')\n    \n    # Clean up Outputs folder by removing individual granule folders \n    for root, dirs, files in os.walk(path, topdown=False):\n        for file in files:\n            try:\n                shutil.move(os.path.join(root, file), path)\n            except OSError:\n                pass\n        for name in dirs:\n            os.rmdir(os.path.join(root, name))\n    return  \n\n\n# NOTE: downloads ~ 200MB of CSV files\nrequest_nsidc_data(api_request)",
  "history_output" : "Traceback (most recent call last):\n  File \"fiona/_shim.pyx\", line 83, in fiona._shim.gdal_open_vector\n  File \"fiona/_err.pyx\", line 291, in fiona._err.exc_wrap_pointer\nfiona._err.CPLE_OpenFailedError: /Users/uhhmed/snowx/nsidc-polygon.json: No such file or directory\nDuring handling of the above exception, another exception occurred:\nTraceback (most recent call last):\n  File \"snowex_nsidc_download_api.py\", line 1, in <module>\n    from snowex_nsidc_search import * \n  File \"/Users/uhhmed/gw-workspace/EkrNtM5vuttw/snowex_nsidc_search.py\", line 29, in <module>\n    gdf = gpd.read_file(polygon_filepath) #Return a GeoDataFrame object\n  File \"/opt/anaconda3/lib/python3.8/site-packages/geopandas/io/file.py\", line 201, in _read_file\n    with reader(path_or_bytes, **kwargs) as features:\n  File \"/opt/anaconda3/lib/python3.8/site-packages/fiona/env.py\", line 408, in wrapper\n    return f(*args, **kwargs)\n  File \"/opt/anaconda3/lib/python3.8/site-packages/fiona/__init__.py\", line 264, in open\n    c = Collection(path, mode, driver=driver, encoding=encoding,\n  File \"/opt/anaconda3/lib/python3.8/site-packages/fiona/collection.py\", line 162, in __init__\n    self.session.start(self, **kwargs)\n  File \"fiona/ogrext.pyx\", line 540, in fiona.ogrext.Session.start\n  File \"fiona/_shim.pyx\", line 90, in fiona._shim.gdal_open_vector\nfiona.errors.DriverError: /Users/uhhmed/snowx/nsidc-polygon.json: No such file or directory\n",
  "history_begin_time" : 1657490824166,
  "history_end_time" : 1657490825216,
  "history_notes" : null,
  "history_process" : "li3z29",
  "host_id" : null,
  "indicator" : "Failed"
},{
  "history_id" : "I8ATLIxAlVaZ",
  "history_input" : "from snowex_nsidc_search import * \n\n\n\n#Set NSIDC data access base URL\nbase_url = 'https://n5eil02u.ecs.nsidc.org/egi/request'\n\n#Set the request mode to asynchronous, \"no\" processing agent (no subsetting or reformatting services available), and optionally removing metadata delivery\n\nparam_dict['request_mode'] = 'async'\nparam_dict['agent'] = 'NO'\nparam_dict['INCLUDE_META'] ='N' #optional if you do not wish to receive the associated metadata files with each science file. \n\nparam_string = '&'.join(\"{!s}={!r}\".format(k,v) for (k,v) in param_dict.items()) # Convert param_dict to string\nparam_string = param_string.replace(\"'\",\"\") # Remove quotes\n\napi_list = [f'{base_url}?{param_string}']\napi_request = api_list[0]\nprint(api_request) # Print API base URL + request parameters\n\n# Start authenticated session with Earthdata Login to allow for data downloads:\ndef setup_earthdata_login_auth(endpoint: str='urs.earthdata.nasa.gov'):\n    netrc_name = \"_netrc\" if system()==\"Windows\" else \".netrc\"\n    try:\n        username, _, password = netrc.netrc(file=join(expanduser('~'), netrc_name)).authenticators(endpoint)\n    except (FileNotFoundError, TypeError):\n        print('Please provide your Earthdata Login credentials for access.')\n        print('Your info will only be passed to %s and will not be exposed in Jupyter.' % (endpoint))\n        username = input('Username: ')\n        password = getpass('Password: ')\n    manager = request.HTTPPasswordMgrWithDefaultRealm()\n    manager.add_password(None, endpoint, username, password)\n    auth = request.HTTPBasicAuthHandler(manager)\n    jar = CookieJar()\n    processor = request.HTTPCookieProcessor(jar)\n    opener = request.build_opener(auth, processor)\n    request.install_opener(opener)\n\nsetup_earthdata_login_auth(endpoint=\"urs.earthdata.nasa.gov\")\n\n\ndef request_nsidc_data(API_request):\n    \"\"\"\n    Performs a data customization and access request from NSIDC's API/\n    Creates an output folder in the working directory if one does not already exist.\n    \n    :API_request: NSIDC API endpoint; see https://nsidc.org/support/how/how-do-i-programmatically-request-data-services for more info\n    on how to configure the API request.\n    \n    \"\"\"\n\n    path = str(f'{datadir}') # Create an output folder if the folder does not already exist.\n    if not os.path.exists(path):\n        os.mkdir(path)\n        \n    base_url = 'https://n5eil02u.ecs.nsidc.org/egi/request'\n\n    \n    r = request.urlopen(API_request)\n    esir_root = ET.fromstring(r.read())\n    orderlist = []   # Look up order ID\n    for order in esir_root.findall(\"./order/\"):\n        orderlist.append(order.text)\n    orderID = orderlist[0]\n    statusURL = base_url + '/' + orderID # Create status URL\n    print('Order status URL: ', statusURL)\n    request_response = request.urlopen(statusURL) # Find order status  \n    request_root = ET.fromstring(request_response.read())\n    statuslist = []\n    for status in request_root.findall(\"./requestStatus/\"):\n        statuslist.append(status.text)\n    status = statuslist[0]\n    while status == 'pending' or status == 'processing': #Continue loop while request is still processing\n        print('Job status is ', status,'. Trying again.')\n        time.sleep(10)\n        loop_response = request.urlopen(statusURL)\n        loop_root = ET.fromstring(loop_response.read())\n        statuslist = [] #find status\n        for status in loop_root.findall(\"./requestStatus/\"):\n            statuslist.append(status.text)\n        status = statuslist[0]\n        if status == 'pending' or status == 'processing':\n            continue\n    if status == 'complete_with_errors' or status == 'failed': # Provide complete_with_errors error message:\n        messagelist = []\n        for message in loop_root.findall(\"./processInfo/\"):\n            messagelist.append(message.text)\n        print('Job status is ', status)\n        print('error messages:')\n        pprint(messagelist)\n    if status == 'complete' or status == 'complete_with_errors':# Download zipped order if status is complete or complete_with_errors\n        downloadURL = 'https://n5eil02u.ecs.nsidc.org/esir/' + orderID + '.zip'\n        print('Job status is ', status)\n        print('Zip download URL: ', downloadURL)\n        print('Beginning download of zipped output...')\n        zip_response = request.urlopen(downloadURL)\n        with zipfile.ZipFile(io.BytesIO(zip_response.read())) as z:\n            z.extractall(path)\n        print('Download is complete.')\n    else: print('Request failed.')\n    \n    # Clean up Outputs folder by removing individual granule folders \n    for root, dirs, files in os.walk(path, topdown=False):\n        for file in files:\n            try:\n                shutil.move(os.path.join(root, file), path)\n            except OSError:\n                pass\n        for name in dirs:\n            os.rmdir(os.path.join(root, name))\n    return  \n\n\n# NOTE: downloads ~ 200MB of CSV files\nrequest_nsidc_data(api_request)",
  "history_output" : "Polygon coordinates to be used in search: -108.28812429263995,38.9376560601842,-107.76084551933717,38.93217823859049,-107.75873173540937,39.16610050975101,-108.25202140957613,39.169195040825244,-108.28812429263995,38.9376560601842\nFound 3 files\nThe total size of all files is 209.20 MB\n{'feed': {'updated': '2022-07-10T22:05:39.174Z', 'id': 'https://cmr.earthdata.nasa.gov:443/search/granules.json?short_name=SNEX17_GPR&version=2&polygon=-108.28812429263995%2C38.9376560601842%2C-107.76084551933717%2C38.93217823859049%2C-107.75873173540937%2C39.16610050975101%2C-108.25202140957613%2C39.169195040825244%2C-108.28812429263995%2C38.9376560601842&temporal=2017-01-01T00%3A00%3A00Z%2C2017-12-31T23%3A59%3A59Z', 'title': 'ECHO granule metadata', 'entry': [{'producer_granule_id': 'SnowEx17_GPR_Version2_Week1.csv', 'time_start': '2017-02-08T00:00:00.000Z', 'updated': '2019-11-20T14:19:39.156Z', 'dataset_id': 'SnowEx17 Ground Penetrating Radar V002', 'data_center': 'NSIDC_ECS', 'title': 'SC:SNEX17_GPR.002:167128516', 'coordinate_system': 'GEODETIC', 'day_night_flag': 'UNSPECIFIED', 'time_end': '2017-02-10T23:59:59.000Z', 'id': 'G1657541380-NSIDC_ECS', 'original_format': 'ECHO10', 'granule_size': '57.3195', 'browse_flag': False, 'polygons': [['39.05189 -108.06789 39.04958 -108.07092 39.02644 -108.13422 39.04032 -108.18504 39.0357 -108.2211 39.01719 -108.21534 38.99637 -108.18261 39.00562 -108.11049 39.02413 -108.06225 39.03338 -108.06213 39.02876 -108.08619 39.04264 -108.05301 39.05189 -108.05289 39.0542 -108.06786 39.05189 -108.06789']], 'collection_concept_id': 'C1655875737-NSIDC_ECS', 'online_access_flag': True, 'links': [{'rel': 'http://esipfed.org/ns/fedsearch/1.1/data#', 'type': 'text/plain', 'hreflang': 'en-US', 'href': 'https://n5eil01u.ecs.nsidc.org/DP1/SNOWEX/SNEX17_GPR.002/2017.02.08/SnowEx17_GPR_Version2_Week1.csv'}, {'rel': 'http://esipfed.org/ns/fedsearch/1.1/metadata#', 'type': 'text/xml', 'title': '(METADATA)', 'hreflang': 'en-US', 'href': 'https://n5eil01u.ecs.nsidc.org/DP1/SNOWEX/SNEX17_GPR.002/2017.02.08/SnowEx17_GPR_Version2_Week1.csv.xml'}, {'inherited': True, 'length': '0.0KB', 'rel': 'http://esipfed.org/ns/fedsearch/1.1/data#', 'hreflang': 'en-US', 'href': 'https://n5eil01u.ecs.nsidc.org/SNOWEX/SNEX17_GPR.002/'}, {'inherited': True, 'length': '0.0KB', 'rel': 'http://esipfed.org/ns/fedsearch/1.1/data#', 'hreflang': 'en-US', 'href': 'https://search.earthdata.nasa.gov/search/granules?p=C1655875737-NSIDC_ECS&q=SNEX17_GPR&m=29.76382409255042!-108.823974609375!4!1!0!0%2C2&tl=1558474061!4!!'}, {'inherited': True, 'length': '0.0KB', 'rel': 'http://esipfed.org/ns/fedsearch/1.1/data#', 'hreflang': 'en-US', 'href': 'https://nsidc.org/data/data-access-tool/SNEX17_GPR/versions/2/'}, {'inherited': True, 'rel': 'http://esipfed.org/ns/fedsearch/1.1/metadata#', 'hreflang': 'en-US', 'href': 'https://doi.org/10.5067/G21LGCNLFSC5'}, {'inherited': True, 'rel': 'http://esipfed.org/ns/fedsearch/1.1/documentation#', 'hreflang': 'en-US', 'href': 'https://doi.org/10.5067/G21LGCNLFSC5'}]}, {'producer_granule_id': 'SnowEx17_GPR_Version2_Week2.csv', 'time_start': '2017-02-14T00:00:00.000Z', 'updated': '2019-11-20T14:19:39.156Z', 'dataset_id': 'SnowEx17 Ground Penetrating Radar V002', 'data_center': 'NSIDC_ECS', 'title': 'SC:SNEX17_GPR.002:167128520', 'coordinate_system': 'GEODETIC', 'day_night_flag': 'UNSPECIFIED', 'time_end': '2017-02-17T23:59:59.000Z', 'id': 'G1657541238-NSIDC_ECS', 'original_format': 'ECHO10', 'granule_size': '85.516', 'browse_flag': False, 'polygons': [['39.10738 -107.88943 39.10738 -107.89539 39.0912 -107.95508 39.07271 -108.02372 39.0542 -108.09234 39.04264 -108.16078 39.0357 -108.2113 39.03338 -108.2113 39.0195 -108.20533 39.00099 -108.18454 39.00099 -108.12811 39.00099 -108.08653 39.02644 -108.02094 39.0357 -107.94938 39.02413 -107.93155 39.04726 -107.89867 39.08195 -107.85677 39.10507 -107.86257 39.10969 -107.88644 39.10738 -107.88943']], 'collection_concept_id': 'C1655875737-NSIDC_ECS', 'online_access_flag': True, 'links': [{'rel': 'http://esipfed.org/ns/fedsearch/1.1/data#', 'type': 'text/plain', 'hreflang': 'en-US', 'href': 'https://n5eil01u.ecs.nsidc.org/DP1/SNOWEX/SNEX17_GPR.002/2017.02.14/SnowEx17_GPR_Version2_Week2.csv'}, {'rel': 'http://esipfed.org/ns/fedsearch/1.1/metadata#', 'type': 'text/xml', 'title': '(METADATA)', 'hreflang': 'en-US', 'href': 'https://n5eil01u.ecs.nsidc.org/DP1/SNOWEX/SNEX17_GPR.002/2017.02.14/SnowEx17_GPR_Version2_Week2.csv.xml'}, {'inherited': True, 'length': '0.0KB', 'rel': 'http://esipfed.org/ns/fedsearch/1.1/data#', 'hreflang': 'en-US', 'href': 'https://n5eil01u.ecs.nsidc.org/SNOWEX/SNEX17_GPR.002/'}, {'inherited': True, 'length': '0.0KB', 'rel': 'http://esipfed.org/ns/fedsearch/1.1/data#', 'hreflang': 'en-US', 'href': 'https://search.earthdata.nasa.gov/search/granules?p=C1655875737-NSIDC_ECS&q=SNEX17_GPR&m=29.76382409255042!-108.823974609375!4!1!0!0%2C2&tl=1558474061!4!!'}, {'inherited': True, 'length': '0.0KB', 'rel': 'http://esipfed.org/ns/fedsearch/1.1/data#', 'hreflang': 'en-US', 'href': 'https://nsidc.org/data/data-access-tool/SNEX17_GPR/versions/2/'}, {'inherited': True, 'rel': 'http://esipfed.org/ns/fedsearch/1.1/metadata#', 'hreflang': 'en-US', 'href': 'https://doi.org/10.5067/G21LGCNLFSC5'}, {'inherited': True, 'rel': 'http://esipfed.org/ns/fedsearch/1.1/documentation#', 'hreflang': 'en-US', 'href': 'https://doi.org/10.5067/G21LGCNLFSC5'}]}, {'producer_granule_id': 'SnowEx17_GPR_Version2_Week3.csv', 'time_start': '2017-02-21T00:00:00.000Z', 'updated': '2020-02-18T12:25:16.785Z', 'dataset_id': 'SnowEx17 Ground Penetrating Radar V002', 'data_center': 'NSIDC_ECS', 'title': 'SC:SNEX17_GPR.002:173252482', 'coordinate_system': 'GEODETIC', 'day_night_flag': 'UNSPECIFIED', 'time_end': '2017-02-25T23:59:59.000Z', 'id': 'G1694922459-NSIDC_ECS', 'original_format': 'ECHO10', 'granule_size': '66.3598', 'browse_flag': False, 'polygons': [['39.05189 -108.06789 39.04958 -108.06792 39.03107 -108.08616 39.0195 -108.15531 39.00331 -108.14352 39.00562 -108.11049 39.00562 -108.05349 39.01719 -108.05334 39.02876 -108.02919 39.0542 -108.05586 39.0542 -108.06786 39.05189 -108.06789']], 'collection_concept_id': 'C1655875737-NSIDC_ECS', 'online_access_flag': True, 'links': [{'rel': 'http://esipfed.org/ns/fedsearch/1.1/data#', 'type': 'text/plain', 'hreflang': 'en-US', 'href': 'https://n5eil01u.ecs.nsidc.org/DP1/SNOWEX/SNEX17_GPR.002/2017.02.21/SnowEx17_GPR_Version2_Week3.csv'}, {'rel': 'http://esipfed.org/ns/fedsearch/1.1/metadata#', 'type': 'text/xml', 'title': '(METADATA)', 'hreflang': 'en-US', 'href': 'https://n5eil01u.ecs.nsidc.org/DP1/SNOWEX/SNEX17_GPR.002/2017.02.21/SnowEx17_GPR_Version2_Week3.csv.xml'}, {'inherited': True, 'length': '0.0KB', 'rel': 'http://esipfed.org/ns/fedsearch/1.1/data#', 'hreflang': 'en-US', 'href': 'https://n5eil01u.ecs.nsidc.org/SNOWEX/SNEX17_GPR.002/'}, {'inherited': True, 'length': '0.0KB', 'rel': 'http://esipfed.org/ns/fedsearch/1.1/data#', 'hreflang': 'en-US', 'href': 'https://search.earthdata.nasa.gov/search/granules?p=C1655875737-NSIDC_ECS&q=SNEX17_GPR&m=29.76382409255042!-108.823974609375!4!1!0!0%2C2&tl=1558474061!4!!'}, {'inherited': True, 'length': '0.0KB', 'rel': 'http://esipfed.org/ns/fedsearch/1.1/data#', 'hreflang': 'en-US', 'href': 'https://nsidc.org/data/data-access-tool/SNEX17_GPR/versions/2/'}, {'inherited': True, 'rel': 'http://esipfed.org/ns/fedsearch/1.1/metadata#', 'hreflang': 'en-US', 'href': 'https://doi.org/10.5067/G21LGCNLFSC5'}, {'inherited': True, 'rel': 'http://esipfed.org/ns/fedsearch/1.1/documentation#', 'hreflang': 'en-US', 'href': 'https://doi.org/10.5067/G21LGCNLFSC5'}]}]}}\nhttps://n5eil02u.ecs.nsidc.org/egi/request?short_name=SNEX17_GPR&version=2&polygon=-108.28812429263995,38.9376560601842,-107.76084551933717,38.93217823859049,-107.75873173540937,39.16610050975101,-108.25202140957613,39.169195040825244,-108.28812429263995,38.9376560601842&temporal=2017-01-01T00:00:00Z,2017-12-31T23:59:59Z&request_mode=async&agent=NO&INCLUDE_META=N\nOrder status URL:  https://n5eil02u.ecs.nsidc.org/egi/request/5000003323187\nJob status is  complete\nZip download URL:  https://n5eil02u.ecs.nsidc.org/esir/5000003323187.zip\nBeginning download of zipped output...\nDownload is complete.\nTraceback (most recent call last):\n  File \"snowex_nsidc_download_api.py\", line 115, in <module>\n    request_nsidc_data(api_request)\n  File \"snowex_nsidc_download_api.py\", line 110, in request_nsidc_data\n    os.rmdir(os.path.join(root, name))\nOSError: [Errno 66] Directory not empty: '/Users/uhhmed/snowx/167128516'\n",
  "history_begin_time" : 1657490737739,
  "history_end_time" : 1657490771065,
  "history_notes" : null,
  "history_process" : "li3z29",
  "host_id" : null,
  "indicator" : "Failed"
},{
  "history_id" : "8EbxVf4ybjdT",
  "history_input" : "from snowex_nsidc_search import * \n\n\n\n#Set NSIDC data access base URL\nbase_url = 'https://n5eil02u.ecs.nsidc.org/egi/request'\n\n#Set the request mode to asynchronous, \"no\" processing agent (no subsetting or reformatting services available), and optionally removing metadata delivery\n\nparam_dict['request_mode'] = 'async'\nparam_dict['agent'] = 'NO'\nparam_dict['INCLUDE_META'] ='N' #optional if you do not wish to receive the associated metadata files with each science file. \n\nparam_string = '&'.join(\"{!s}={!r}\".format(k,v) for (k,v) in param_dict.items()) # Convert param_dict to string\nparam_string = param_string.replace(\"'\",\"\") # Remove quotes\n\napi_list = [f'{base_url}?{param_string}']\napi_request = api_list[0]\nprint(api_request) # Print API base URL + request parameters\n\n# Start authenticated session with Earthdata Login to allow for data downloads:\ndef setup_earthdata_login_auth(endpoint: str='urs.earthdata.nasa.gov'):\n    netrc_name = \"_netrc\" if system()==\"Windows\" else \".netrc\"\n    try:\n        username, _, password = netrc.netrc(file=join(expanduser('~'), netrc_name)).authenticators(endpoint)\n    except (FileNotFoundError, TypeError):\n        print('Please provide your Earthdata Login credentials for access.')\n        print('Your info will only be passed to %s and will not be exposed in Jupyter.' % (endpoint))\n        username = input('Username: ')\n        password = getpass('Password: ')\n    manager = request.HTTPPasswordMgrWithDefaultRealm()\n    manager.add_password(None, endpoint, username, password)\n    auth = request.HTTPBasicAuthHandler(manager)\n    jar = CookieJar()\n    processor = request.HTTPCookieProcessor(jar)\n    opener = request.build_opener(auth, processor)\n    request.install_opener(opener)\n\nsetup_earthdata_login_auth(endpoint=\"urs.earthdata.nasa.gov\")\n\n\ndef request_nsidc_data(API_request):\n    \"\"\"\n    Performs a data customization and access request from NSIDC's API/\n    Creates an output folder in the working directory if one does not already exist.\n    \n    :API_request: NSIDC API endpoint; see https://nsidc.org/support/how/how-do-i-programmatically-request-data-services for more info\n    on how to configure the API request.\n    \n    \"\"\"\n\n    path = str(f'{datadir}') # Create an output folder if the folder does not already exist.\n    if not os.path.exists(path):\n        os.mkdir(path)\n        \n    base_url = 'https://n5eil02u.ecs.nsidc.org/egi/request'\n\n    \n    r = request.urlopen(API_request)\n    esir_root = ET.fromstring(r.read())\n    orderlist = []   # Look up order ID\n    for order in esir_root.findall(\"./order/\"):\n        orderlist.append(order.text)\n    orderID = orderlist[0]\n    statusURL = base_url + '/' + orderID # Create status URL\n    print('Order status URL: ', statusURL)\n    request_response = request.urlopen(statusURL) # Find order status  \n    request_root = ET.fromstring(request_response.read())\n    statuslist = []\n    for status in request_root.findall(\"./requestStatus/\"):\n        statuslist.append(status.text)\n    status = statuslist[0]\n    while status == 'pending' or status == 'processing': #Continue loop while request is still processing\n        print('Job status is ', status,'. Trying again.')\n        time.sleep(10)\n        loop_response = request.urlopen(statusURL)\n        loop_root = ET.fromstring(loop_response.read())\n        statuslist = [] #find status\n        for status in loop_root.findall(\"./requestStatus/\"):\n            statuslist.append(status.text)\n        status = statuslist[0]\n        if status == 'pending' or status == 'processing':\n            continue\n    if status == 'complete_with_errors' or status == 'failed': # Provide complete_with_errors error message:\n        messagelist = []\n        for message in loop_root.findall(\"./processInfo/\"):\n            messagelist.append(message.text)\n        print('Job status is ', status)\n        print('error messages:')\n        pprint(messagelist)\n    if status == 'complete' or status == 'complete_with_errors':# Download zipped order if status is complete or complete_with_errors\n        downloadURL = 'https://n5eil02u.ecs.nsidc.org/esir/' + orderID + '.zip'\n        print('Job status is ', status)\n        print('Zip download URL: ', downloadURL)\n        print('Beginning download of zipped output...')\n        zip_response = request.urlopen(downloadURL)\n        with zipfile.ZipFile(io.BytesIO(zip_response.read())) as z:\n            z.extractall(path)\n        print('Download is complete.')\n    else: print('Request failed.')\n    \n    # Clean up Outputs folder by removing individual granule folders \n    for root, dirs, files in os.walk(path, topdown=False):\n        for file in files:\n            try:\n                shutil.move(os.path.join(root, file), path)\n            except OSError:\n                pass\n        for name in dirs:\n            os.rmdir(os.path.join(root, name))\n    return  \n\n\n# NOTE: downloads ~ 200MB of CSV files\nrequest_nsidc_data(api_request)",
  "history_output" : "Polygon coordinates to be used in search: -108.28812429263995,38.9376560601842,-107.76084551933717,38.93217823859049,-107.75873173540937,39.16610050975101,-108.25202140957613,39.169195040825244,-108.28812429263995,38.9376560601842\nFound 3 files\nThe total size of all files is 209.20 MB\n{'feed': {'updated': '2022-07-10T21:53:49.413Z', 'id': 'https://cmr.earthdata.nasa.gov:443/search/granules.json?short_name=SNEX17_GPR&version=2&polygon=-108.28812429263995%2C38.9376560601842%2C-107.76084551933717%2C38.93217823859049%2C-107.75873173540937%2C39.16610050975101%2C-108.25202140957613%2C39.169195040825244%2C-108.28812429263995%2C38.9376560601842&temporal=2017-01-01T00%3A00%3A00Z%2C2017-12-31T23%3A59%3A59Z', 'title': 'ECHO granule metadata', 'entry': [{'producer_granule_id': 'SnowEx17_GPR_Version2_Week1.csv', 'time_start': '2017-02-08T00:00:00.000Z', 'updated': '2019-11-20T14:19:39.156Z', 'dataset_id': 'SnowEx17 Ground Penetrating Radar V002', 'data_center': 'NSIDC_ECS', 'title': 'SC:SNEX17_GPR.002:167128516', 'coordinate_system': 'GEODETIC', 'day_night_flag': 'UNSPECIFIED', 'time_end': '2017-02-10T23:59:59.000Z', 'id': 'G1657541380-NSIDC_ECS', 'original_format': 'ECHO10', 'granule_size': '57.3195', 'browse_flag': False, 'polygons': [['39.05189 -108.06789 39.04958 -108.07092 39.02644 -108.13422 39.04032 -108.18504 39.0357 -108.2211 39.01719 -108.21534 38.99637 -108.18261 39.00562 -108.11049 39.02413 -108.06225 39.03338 -108.06213 39.02876 -108.08619 39.04264 -108.05301 39.05189 -108.05289 39.0542 -108.06786 39.05189 -108.06789']], 'collection_concept_id': 'C1655875737-NSIDC_ECS', 'online_access_flag': True, 'links': [{'rel': 'http://esipfed.org/ns/fedsearch/1.1/data#', 'type': 'text/plain', 'hreflang': 'en-US', 'href': 'https://n5eil01u.ecs.nsidc.org/DP1/SNOWEX/SNEX17_GPR.002/2017.02.08/SnowEx17_GPR_Version2_Week1.csv'}, {'rel': 'http://esipfed.org/ns/fedsearch/1.1/metadata#', 'type': 'text/xml', 'title': '(METADATA)', 'hreflang': 'en-US', 'href': 'https://n5eil01u.ecs.nsidc.org/DP1/SNOWEX/SNEX17_GPR.002/2017.02.08/SnowEx17_GPR_Version2_Week1.csv.xml'}, {'inherited': True, 'length': '0.0KB', 'rel': 'http://esipfed.org/ns/fedsearch/1.1/data#', 'hreflang': 'en-US', 'href': 'https://n5eil01u.ecs.nsidc.org/SNOWEX/SNEX17_GPR.002/'}, {'inherited': True, 'length': '0.0KB', 'rel': 'http://esipfed.org/ns/fedsearch/1.1/data#', 'hreflang': 'en-US', 'href': 'https://search.earthdata.nasa.gov/search/granules?p=C1655875737-NSIDC_ECS&q=SNEX17_GPR&m=29.76382409255042!-108.823974609375!4!1!0!0%2C2&tl=1558474061!4!!'}, {'inherited': True, 'length': '0.0KB', 'rel': 'http://esipfed.org/ns/fedsearch/1.1/data#', 'hreflang': 'en-US', 'href': 'https://nsidc.org/data/data-access-tool/SNEX17_GPR/versions/2/'}, {'inherited': True, 'rel': 'http://esipfed.org/ns/fedsearch/1.1/metadata#', 'hreflang': 'en-US', 'href': 'https://doi.org/10.5067/G21LGCNLFSC5'}, {'inherited': True, 'rel': 'http://esipfed.org/ns/fedsearch/1.1/documentation#', 'hreflang': 'en-US', 'href': 'https://doi.org/10.5067/G21LGCNLFSC5'}]}, {'producer_granule_id': 'SnowEx17_GPR_Version2_Week2.csv', 'time_start': '2017-02-14T00:00:00.000Z', 'updated': '2019-11-20T14:19:39.156Z', 'dataset_id': 'SnowEx17 Ground Penetrating Radar V002', 'data_center': 'NSIDC_ECS', 'title': 'SC:SNEX17_GPR.002:167128520', 'coordinate_system': 'GEODETIC', 'day_night_flag': 'UNSPECIFIED', 'time_end': '2017-02-17T23:59:59.000Z', 'id': 'G1657541238-NSIDC_ECS', 'original_format': 'ECHO10', 'granule_size': '85.516', 'browse_flag': False, 'polygons': [['39.10738 -107.88943 39.10738 -107.89539 39.0912 -107.95508 39.07271 -108.02372 39.0542 -108.09234 39.04264 -108.16078 39.0357 -108.2113 39.03338 -108.2113 39.0195 -108.20533 39.00099 -108.18454 39.00099 -108.12811 39.00099 -108.08653 39.02644 -108.02094 39.0357 -107.94938 39.02413 -107.93155 39.04726 -107.89867 39.08195 -107.85677 39.10507 -107.86257 39.10969 -107.88644 39.10738 -107.88943']], 'collection_concept_id': 'C1655875737-NSIDC_ECS', 'online_access_flag': True, 'links': [{'rel': 'http://esipfed.org/ns/fedsearch/1.1/data#', 'type': 'text/plain', 'hreflang': 'en-US', 'href': 'https://n5eil01u.ecs.nsidc.org/DP1/SNOWEX/SNEX17_GPR.002/2017.02.14/SnowEx17_GPR_Version2_Week2.csv'}, {'rel': 'http://esipfed.org/ns/fedsearch/1.1/metadata#', 'type': 'text/xml', 'title': '(METADATA)', 'hreflang': 'en-US', 'href': 'https://n5eil01u.ecs.nsidc.org/DP1/SNOWEX/SNEX17_GPR.002/2017.02.14/SnowEx17_GPR_Version2_Week2.csv.xml'}, {'inherited': True, 'length': '0.0KB', 'rel': 'http://esipfed.org/ns/fedsearch/1.1/data#', 'hreflang': 'en-US', 'href': 'https://n5eil01u.ecs.nsidc.org/SNOWEX/SNEX17_GPR.002/'}, {'inherited': True, 'length': '0.0KB', 'rel': 'http://esipfed.org/ns/fedsearch/1.1/data#', 'hreflang': 'en-US', 'href': 'https://search.earthdata.nasa.gov/search/granules?p=C1655875737-NSIDC_ECS&q=SNEX17_GPR&m=29.76382409255042!-108.823974609375!4!1!0!0%2C2&tl=1558474061!4!!'}, {'inherited': True, 'length': '0.0KB', 'rel': 'http://esipfed.org/ns/fedsearch/1.1/data#', 'hreflang': 'en-US', 'href': 'https://nsidc.org/data/data-access-tool/SNEX17_GPR/versions/2/'}, {'inherited': True, 'rel': 'http://esipfed.org/ns/fedsearch/1.1/metadata#', 'hreflang': 'en-US', 'href': 'https://doi.org/10.5067/G21LGCNLFSC5'}, {'inherited': True, 'rel': 'http://esipfed.org/ns/fedsearch/1.1/documentation#', 'hreflang': 'en-US', 'href': 'https://doi.org/10.5067/G21LGCNLFSC5'}]}, {'producer_granule_id': 'SnowEx17_GPR_Version2_Week3.csv', 'time_start': '2017-02-21T00:00:00.000Z', 'updated': '2020-02-18T12:25:16.785Z', 'dataset_id': 'SnowEx17 Ground Penetrating Radar V002', 'data_center': 'NSIDC_ECS', 'title': 'SC:SNEX17_GPR.002:173252482', 'coordinate_system': 'GEODETIC', 'day_night_flag': 'UNSPECIFIED', 'time_end': '2017-02-25T23:59:59.000Z', 'id': 'G1694922459-NSIDC_ECS', 'original_format': 'ECHO10', 'granule_size': '66.3598', 'browse_flag': False, 'polygons': [['39.05189 -108.06789 39.04958 -108.06792 39.03107 -108.08616 39.0195 -108.15531 39.00331 -108.14352 39.00562 -108.11049 39.00562 -108.05349 39.01719 -108.05334 39.02876 -108.02919 39.0542 -108.05586 39.0542 -108.06786 39.05189 -108.06789']], 'collection_concept_id': 'C1655875737-NSIDC_ECS', 'online_access_flag': True, 'links': [{'rel': 'http://esipfed.org/ns/fedsearch/1.1/data#', 'type': 'text/plain', 'hreflang': 'en-US', 'href': 'https://n5eil01u.ecs.nsidc.org/DP1/SNOWEX/SNEX17_GPR.002/2017.02.21/SnowEx17_GPR_Version2_Week3.csv'}, {'rel': 'http://esipfed.org/ns/fedsearch/1.1/metadata#', 'type': 'text/xml', 'title': '(METADATA)', 'hreflang': 'en-US', 'href': 'https://n5eil01u.ecs.nsidc.org/DP1/SNOWEX/SNEX17_GPR.002/2017.02.21/SnowEx17_GPR_Version2_Week3.csv.xml'}, {'inherited': True, 'length': '0.0KB', 'rel': 'http://esipfed.org/ns/fedsearch/1.1/data#', 'hreflang': 'en-US', 'href': 'https://n5eil01u.ecs.nsidc.org/SNOWEX/SNEX17_GPR.002/'}, {'inherited': True, 'length': '0.0KB', 'rel': 'http://esipfed.org/ns/fedsearch/1.1/data#', 'hreflang': 'en-US', 'href': 'https://search.earthdata.nasa.gov/search/granules?p=C1655875737-NSIDC_ECS&q=SNEX17_GPR&m=29.76382409255042!-108.823974609375!4!1!0!0%2C2&tl=1558474061!4!!'}, {'inherited': True, 'length': '0.0KB', 'rel': 'http://esipfed.org/ns/fedsearch/1.1/data#', 'hreflang': 'en-US', 'href': 'https://nsidc.org/data/data-access-tool/SNEX17_GPR/versions/2/'}, {'inherited': True, 'rel': 'http://esipfed.org/ns/fedsearch/1.1/metadata#', 'hreflang': 'en-US', 'href': 'https://doi.org/10.5067/G21LGCNLFSC5'}, {'inherited': True, 'rel': 'http://esipfed.org/ns/fedsearch/1.1/documentation#', 'hreflang': 'en-US', 'href': 'https://doi.org/10.5067/G21LGCNLFSC5'}]}]}}\nhttps://n5eil02u.ecs.nsidc.org/egi/request?short_name=SNEX17_GPR&version=2&polygon=-108.28812429263995,38.9376560601842,-107.76084551933717,38.93217823859049,-107.75873173540937,39.16610050975101,-108.25202140957613,39.169195040825244,-108.28812429263995,38.9376560601842&temporal=2017-01-01T00:00:00Z,2017-12-31T23:59:59Z&request_mode=async&agent=NO&INCLUDE_META=N\nTraceback (most recent call last):\n  File \"snowex_nsidc_download_api.py\", line 115, in <module>\n    request_nsidc_data(api_request)\n  File \"snowex_nsidc_download_api.py\", line 59, in request_nsidc_data\n    r = request.urlopen(API_request)\n  File \"/opt/anaconda3/lib/python3.8/urllib/request.py\", line 222, in urlopen\n    return opener.open(url, data, timeout)\n  File \"/opt/anaconda3/lib/python3.8/urllib/request.py\", line 531, in open\n    response = meth(req, response)\n  File \"/opt/anaconda3/lib/python3.8/urllib/request.py\", line 640, in http_response\n    response = self.parent.error(\n  File \"/opt/anaconda3/lib/python3.8/urllib/request.py\", line 563, in error\n    result = self._call_chain(*args)\n  File \"/opt/anaconda3/lib/python3.8/urllib/request.py\", line 502, in _call_chain\n    result = func(*args)\n  File \"/opt/anaconda3/lib/python3.8/urllib/request.py\", line 755, in http_error_302\n    return self.parent.open(new, timeout=req.timeout)\n  File \"/opt/anaconda3/lib/python3.8/urllib/request.py\", line 531, in open\n    response = meth(req, response)\n  File \"/opt/anaconda3/lib/python3.8/urllib/request.py\", line 640, in http_response\n    response = self.parent.error(\n  File \"/opt/anaconda3/lib/python3.8/urllib/request.py\", line 563, in error\n    result = self._call_chain(*args)\n  File \"/opt/anaconda3/lib/python3.8/urllib/request.py\", line 502, in _call_chain\n    result = func(*args)\n  File \"/opt/anaconda3/lib/python3.8/urllib/request.py\", line 1062, in http_error_401\n    response = self.http_error_auth_reqed('www-authenticate',\n  File \"/opt/anaconda3/lib/python3.8/urllib/request.py\", line 1011, in http_error_auth_reqed\n    return self.retry_http_basic_auth(host, req, realm)\n  File \"/opt/anaconda3/lib/python3.8/urllib/request.py\", line 1026, in retry_http_basic_auth\n    return self.parent.open(req, timeout=req.timeout)\n  File \"/opt/anaconda3/lib/python3.8/urllib/request.py\", line 531, in open\n    response = meth(req, response)\n  File \"/opt/anaconda3/lib/python3.8/urllib/request.py\", line 640, in http_response\n    response = self.parent.error(\n  File \"/opt/anaconda3/lib/python3.8/urllib/request.py\", line 569, in error\n    return self._call_chain(*args)\n  File \"/opt/anaconda3/lib/python3.8/urllib/request.py\", line 502, in _call_chain\n    result = func(*args)\n  File \"/opt/anaconda3/lib/python3.8/urllib/request.py\", line 649, in http_error_default\n    raise HTTPError(req.full_url, code, msg, hdrs, fp)\nurllib.error.HTTPError: HTTP Error 401: Unauthorized\n",
  "history_begin_time" : 1657490027551,
  "history_end_time" : 1657490030512,
  "history_notes" : null,
  "history_process" : "li3z29",
  "host_id" : null,
  "indicator" : "Failed"
},{
  "history_id" : "5348fos1uur",
  "history_input" : "from snowex_nsidc_search import * \n\n\n\n#Set NSIDC data access base URL\nbase_url = 'https://n5eil02u.ecs.nsidc.org/egi/request'\n\n#Set the request mode to asynchronous, \"no\" processing agent (no subsetting or reformatting services available), and optionally removing metadata delivery\n\nparam_dict['request_mode'] = 'async'\nparam_dict['agent'] = 'NO'\nparam_dict['INCLUDE_META'] ='N' #optional if you do not wish to receive the associated metadata files with each science file. \n\nparam_string = '&'.join(\"{!s}={!r}\".format(k,v) for (k,v) in param_dict.items()) # Convert param_dict to string\nparam_string = param_string.replace(\"'\",\"\") # Remove quotes\n\napi_list = [f'{base_url}?{param_string}']\napi_request = api_list[0]\nprint(api_request) # Print API base URL + request parameters\n\n# Start authenticated session with Earthdata Login to allow for data downloads:\ndef setup_earthdata_login_auth(endpoint: str='urs.earthdata.nasa.gov'):\n    netrc_name = \"_netrc\" if system()==\"Windows\" else \".netrc\"\n    try:\n        username, _, password = netrc.netrc(file=join(expanduser('~'), netrc_name)).authenticators(endpoint)\n    except (FileNotFoundError, TypeError):\n        print('Please provide your Earthdata Login credentials for access.')\n        print('Your info will only be passed to %s and will not be exposed in Jupyter.' % (endpoint))\n        username = input('Username: ')\n        password = getpass('Password: ')\n    manager = request.HTTPPasswordMgrWithDefaultRealm()\n    manager.add_password(None, endpoint, username, password)\n    auth = request.HTTPBasicAuthHandler(manager)\n    jar = CookieJar()\n    processor = request.HTTPCookieProcessor(jar)\n    opener = request.build_opener(auth, processor)\n    request.install_opener(opener)\n\nsetup_earthdata_login_auth(endpoint=\"urs.earthdata.nasa.gov\")\n\n\ndef request_nsidc_data(API_request):\n    \"\"\"\n    Performs a data customization and access request from NSIDC's API/\n    Creates an output folder in the working directory if one does not already exist.\n    \n    :API_request: NSIDC API endpoint; see https://nsidc.org/support/how/how-do-i-programmatically-request-data-services for more info\n    on how to configure the API request.\n    \n    \"\"\"\n\n    path = str(f'{datadir}') # Create an output folder if the folder does not already exist.\n    if not os.path.exists(path):\n        os.mkdir(path)\n        \n    base_url = 'https://n5eil02u.ecs.nsidc.org/egi/request'\n\n    \n    r = request.urlopen(API_request)\n    esir_root = ET.fromstring(r.read())\n    orderlist = []   # Look up order ID\n    for order in esir_root.findall(\"./order/\"):\n        orderlist.append(order.text)\n    orderID = orderlist[0]\n    statusURL = base_url + '/' + orderID # Create status URL\n    print('Order status URL: ', statusURL)\n    request_response = request.urlopen(statusURL) # Find order status  \n    request_root = ET.fromstring(request_response.read())\n    statuslist = []\n    for status in request_root.findall(\"./requestStatus/\"):\n        statuslist.append(status.text)\n    status = statuslist[0]\n    while status == 'pending' or status == 'processing': #Continue loop while request is still processing\n        print('Job status is ', status,'. Trying again.')\n        time.sleep(10)\n        loop_response = request.urlopen(statusURL)\n        loop_root = ET.fromstring(loop_response.read())\n        statuslist = [] #find status\n        for status in loop_root.findall(\"./requestStatus/\"):\n            statuslist.append(status.text)\n        status = statuslist[0]\n        if status == 'pending' or status == 'processing':\n            continue\n    if status == 'complete_with_errors' or status == 'failed': # Provide complete_with_errors error message:\n        messagelist = []\n        for message in loop_root.findall(\"./processInfo/\"):\n            messagelist.append(message.text)\n        print('Job status is ', status)\n        print('error messages:')\n        pprint(messagelist)\n    if status == 'complete' or status == 'complete_with_errors':# Download zipped order if status is complete or complete_with_errors\n        downloadURL = 'https://n5eil02u.ecs.nsidc.org/esir/' + orderID + '.zip'\n        print('Job status is ', status)\n        print('Zip download URL: ', downloadURL)\n        print('Beginning download of zipped output...')\n        zip_response = request.urlopen(downloadURL)\n        with zipfile.ZipFile(io.BytesIO(zip_response.read())) as z:\n            z.extractall(path)\n        print('Download is complete.')\n    else: print('Request failed.')\n    \n    # Clean up Outputs folder by removing individual granule folders \n    for root, dirs, files in os.walk(path, topdown=False):\n        for file in files:\n            try:\n                shutil.move(os.path.join(root, file), path)\n            except OSError:\n                pass\n        for name in dirs:\n            os.rmdir(os.path.join(root, name))\n    return  \n\n\n# NOTE: downloads ~ 200MB of CSV files\nrequest_nsidc_data(api_request)",
  "history_output" : "Polygon coordinates to be used in search: -108.2352445938561,38.98556907427165,-107.85284607930835,38.978765032966244,-107.85494925720668,39.10596902171742,-108.22772795408136,39.11294532581687,-108.2352445938561,38.98556907427165\nFound 3 files\nThe total size of all files is 209.20 MB\n{'feed': {'updated': '2022-01-19T16:16:55.828Z', 'id': 'https://cmr.earthdata.nasa.gov:443/search/granules.json?short_name=SNEX17_GPR&version=2&polygon=-108.2352445938561%2C38.98556907427165%2C-107.85284607930835%2C38.978765032966244%2C-107.85494925720668%2C39.10596902171742%2C-108.22772795408136%2C39.11294532581687%2C-108.2352445938561%2C38.98556907427165&temporal=2017-01-01T00%3A00%3A00Z%2C2017-12-31T23%3A59%3A59Z', 'title': 'ECHO granule metadata', 'entry': [{'producer_granule_id': 'SnowEx17_GPR_Version2_Week1.csv', 'time_start': '2017-02-08T00:00:00.000Z', 'updated': '2019-11-20T14:19:39.156Z', 'dataset_id': 'SnowEx17 Ground Penetrating Radar V002', 'data_center': 'NSIDC_ECS', 'title': 'SC:SNEX17_GPR.002:167128516', 'coordinate_system': 'GEODETIC', 'day_night_flag': 'UNSPECIFIED', 'time_end': '2017-02-10T23:59:59.000Z', 'id': 'G1657541380-NSIDC_ECS', 'original_format': 'ECHO10', 'granule_size': '57.3195', 'browse_flag': False, 'polygons': [['39.05189 -108.06789 39.04958 -108.07092 39.02644 -108.13422 39.04032 -108.18504 39.0357 -108.2211 39.01719 -108.21534 38.99637 -108.18261 39.00562 -108.11049 39.02413 -108.06225 39.03338 -108.06213 39.02876 -108.08619 39.04264 -108.05301 39.05189 -108.05289 39.0542 -108.06786 39.05189 -108.06789']], 'collection_concept_id': 'C1655875737-NSIDC_ECS', 'online_access_flag': True, 'links': [{'rel': 'http://esipfed.org/ns/fedsearch/1.1/data#', 'type': 'text/plain', 'hreflang': 'en-US', 'href': 'https://n5eil01u.ecs.nsidc.org/DP1/SNOWEX/SNEX17_GPR.002/2017.02.08/SnowEx17_GPR_Version2_Week1.csv'}, {'rel': 'http://esipfed.org/ns/fedsearch/1.1/metadata#', 'type': 'text/xml', 'title': '(METADATA)', 'hreflang': 'en-US', 'href': 'https://n5eil01u.ecs.nsidc.org/DP1/SNOWEX/SNEX17_GPR.002/2017.02.08/SnowEx17_GPR_Version2_Week1.csv.xml'}, {'inherited': True, 'length': '0.0KB', 'rel': 'http://esipfed.org/ns/fedsearch/1.1/data#', 'hreflang': 'en-US', 'href': 'https://n5eil01u.ecs.nsidc.org/SNOWEX/SNEX17_GPR.002/'}, {'inherited': True, 'length': '0.0KB', 'rel': 'http://esipfed.org/ns/fedsearch/1.1/data#', 'hreflang': 'en-US', 'href': 'https://search.earthdata.nasa.gov/search/granules?p=C1655875737-NSIDC_ECS&q=SNEX17_GPR&m=29.76382409255042!-108.823974609375!4!1!0!0%2C2&tl=1558474061!4!!'}, {'inherited': True, 'length': '0.0KB', 'rel': 'http://esipfed.org/ns/fedsearch/1.1/data#', 'hreflang': 'en-US', 'href': 'https://nsidc.org/data/data-access-tool/SNEX17_GPR/versions/2/'}, {'inherited': True, 'rel': 'http://esipfed.org/ns/fedsearch/1.1/metadata#', 'hreflang': 'en-US', 'href': 'https://doi.org/10.5067/G21LGCNLFSC5'}, {'inherited': True, 'rel': 'http://esipfed.org/ns/fedsearch/1.1/documentation#', 'hreflang': 'en-US', 'href': 'https://doi.org/10.5067/G21LGCNLFSC5'}]}, {'producer_granule_id': 'SnowEx17_GPR_Version2_Week2.csv', 'time_start': '2017-02-14T00:00:00.000Z', 'updated': '2019-11-20T14:19:39.156Z', 'dataset_id': 'SnowEx17 Ground Penetrating Radar V002', 'data_center': 'NSIDC_ECS', 'title': 'SC:SNEX17_GPR.002:167128520', 'coordinate_system': 'GEODETIC', 'day_night_flag': 'UNSPECIFIED', 'time_end': '2017-02-17T23:59:59.000Z', 'id': 'G1657541238-NSIDC_ECS', 'original_format': 'ECHO10', 'granule_size': '85.516', 'browse_flag': False, 'polygons': [['39.10738 -107.88943 39.10738 -107.89539 39.0912 -107.95508 39.07271 -108.02372 39.0542 -108.09234 39.04264 -108.16078 39.0357 -108.2113 39.03338 -108.2113 39.0195 -108.20533 39.00099 -108.18454 39.00099 -108.12811 39.00099 -108.08653 39.02644 -108.02094 39.0357 -107.94938 39.02413 -107.93155 39.04726 -107.89867 39.08195 -107.85677 39.10507 -107.86257 39.10969 -107.88644 39.10738 -107.88943']], 'collection_concept_id': 'C1655875737-NSIDC_ECS', 'online_access_flag': True, 'links': [{'rel': 'http://esipfed.org/ns/fedsearch/1.1/data#', 'type': 'text/plain', 'hreflang': 'en-US', 'href': 'https://n5eil01u.ecs.nsidc.org/DP1/SNOWEX/SNEX17_GPR.002/2017.02.14/SnowEx17_GPR_Version2_Week2.csv'}, {'rel': 'http://esipfed.org/ns/fedsearch/1.1/metadata#', 'type': 'text/xml', 'title': '(METADATA)', 'hreflang': 'en-US', 'href': 'https://n5eil01u.ecs.nsidc.org/DP1/SNOWEX/SNEX17_GPR.002/2017.02.14/SnowEx17_GPR_Version2_Week2.csv.xml'}, {'inherited': True, 'length': '0.0KB', 'rel': 'http://esipfed.org/ns/fedsearch/1.1/data#', 'hreflang': 'en-US', 'href': 'https://n5eil01u.ecs.nsidc.org/SNOWEX/SNEX17_GPR.002/'}, {'inherited': True, 'length': '0.0KB', 'rel': 'http://esipfed.org/ns/fedsearch/1.1/data#', 'hreflang': 'en-US', 'href': 'https://search.earthdata.nasa.gov/search/granules?p=C1655875737-NSIDC_ECS&q=SNEX17_GPR&m=29.76382409255042!-108.823974609375!4!1!0!0%2C2&tl=1558474061!4!!'}, {'inherited': True, 'length': '0.0KB', 'rel': 'http://esipfed.org/ns/fedsearch/1.1/data#', 'hreflang': 'en-US', 'href': 'https://nsidc.org/data/data-access-tool/SNEX17_GPR/versions/2/'}, {'inherited': True, 'rel': 'http://esipfed.org/ns/fedsearch/1.1/metadata#', 'hreflang': 'en-US', 'href': 'https://doi.org/10.5067/G21LGCNLFSC5'}, {'inherited': True, 'rel': 'http://esipfed.org/ns/fedsearch/1.1/documentation#', 'hreflang': 'en-US', 'href': 'https://doi.org/10.5067/G21LGCNLFSC5'}]}, {'producer_granule_id': 'SnowEx17_GPR_Version2_Week3.csv', 'time_start': '2017-02-21T00:00:00.000Z', 'updated': '2020-02-18T12:25:16.785Z', 'dataset_id': 'SnowEx17 Ground Penetrating Radar V002', 'data_center': 'NSIDC_ECS', 'title': 'SC:SNEX17_GPR.002:173252482', 'coordinate_system': 'GEODETIC', 'day_night_flag': 'UNSPECIFIED', 'time_end': '2017-02-25T23:59:59.000Z', 'id': 'G1694922459-NSIDC_ECS', 'original_format': 'ECHO10', 'granule_size': '66.3598', 'browse_flag': False, 'polygons': [['39.05189 -108.06789 39.04958 -108.06792 39.03107 -108.08616 39.0195 -108.15531 39.00331 -108.14352 39.00562 -108.11049 39.00562 -108.05349 39.01719 -108.05334 39.02876 -108.02919 39.0542 -108.05586 39.0542 -108.06786 39.05189 -108.06789']], 'collection_concept_id': 'C1655875737-NSIDC_ECS', 'online_access_flag': True, 'links': [{'rel': 'http://esipfed.org/ns/fedsearch/1.1/data#', 'type': 'text/plain', 'hreflang': 'en-US', 'href': 'https://n5eil01u.ecs.nsidc.org/DP1/SNOWEX/SNEX17_GPR.002/2017.02.21/SnowEx17_GPR_Version2_Week3.csv'}, {'rel': 'http://esipfed.org/ns/fedsearch/1.1/metadata#', 'type': 'text/xml', 'title': '(METADATA)', 'hreflang': 'en-US', 'href': 'https://n5eil01u.ecs.nsidc.org/DP1/SNOWEX/SNEX17_GPR.002/2017.02.21/SnowEx17_GPR_Version2_Week3.csv.xml'}, {'inherited': True, 'length': '0.0KB', 'rel': 'http://esipfed.org/ns/fedsearch/1.1/data#', 'hreflang': 'en-US', 'href': 'https://n5eil01u.ecs.nsidc.org/SNOWEX/SNEX17_GPR.002/'}, {'inherited': True, 'length': '0.0KB', 'rel': 'http://esipfed.org/ns/fedsearch/1.1/data#', 'hreflang': 'en-US', 'href': 'https://search.earthdata.nasa.gov/search/granules?p=C1655875737-NSIDC_ECS&q=SNEX17_GPR&m=29.76382409255042!-108.823974609375!4!1!0!0%2C2&tl=1558474061!4!!'}, {'inherited': True, 'length': '0.0KB', 'rel': 'http://esipfed.org/ns/fedsearch/1.1/data#', 'hreflang': 'en-US', 'href': 'https://nsidc.org/data/data-access-tool/SNEX17_GPR/versions/2/'}, {'inherited': True, 'rel': 'http://esipfed.org/ns/fedsearch/1.1/metadata#', 'hreflang': 'en-US', 'href': 'https://doi.org/10.5067/G21LGCNLFSC5'}, {'inherited': True, 'rel': 'http://esipfed.org/ns/fedsearch/1.1/documentation#', 'hreflang': 'en-US', 'href': 'https://doi.org/10.5067/G21LGCNLFSC5'}]}]}}\nhttps://n5eil02u.ecs.nsidc.org/egi/request?short_name=SNEX17_GPR&version=2&polygon=-108.2352445938561,38.98556907427165,-107.85284607930835,38.978765032966244,-107.85494925720668,39.10596902171742,-108.22772795408136,39.11294532581687,-108.2352445938561,38.98556907427165&temporal=2017-01-01T00:00:00Z,2017-12-31T23:59:59Z&request_mode=async&agent=NO&INCLUDE_META=N\nOrder status URL:  https://n5eil02u.ecs.nsidc.org/egi/request/5000002721604\nJob status is  complete\nZip download URL:  https://n5eil02u.ecs.nsidc.org/esir/5000002721604.zip\nBeginning download of zipped output...\nDownload is complete.\nTraceback (most recent call last):\n  File \"/Users/joe/gw-workspace/pXH9sGbNV4JrcX6ZLAZSIb2mfG/snowex_nsidc_download_api.py\", line 115, in <module>\n    request_nsidc_data(api_request)\n  File \"/Users/joe/gw-workspace/pXH9sGbNV4JrcX6ZLAZSIb2mfG/snowex_nsidc_download_api.py\", line 110, in request_nsidc_data\n    os.rmdir(os.path.join(root, name))\nOSError: [Errno 66] Directory not empty: '/Users/joe/Documents/data/173252482'\n",
  "history_begin_time" : 1642609015223,
  "history_end_time" : 1642609029140,
  "history_notes" : null,
  "history_process" : "li3z29",
  "host_id" : "100001",
  "indicator" : "Done"
},{
  "history_id" : "morbs6eibvn",
  "history_input" : null,
  "history_output" : "Authentication Failed. Wrong Password.",
  "history_begin_time" : 1642608941427,
  "history_end_time" : 1642608941437,
  "history_notes" : null,
  "history_process" : "li3z29",
  "host_id" : "100001",
  "indicator" : "Failed"
},{
  "history_id" : "i480m4uti8n",
  "history_input" : null,
  "history_output" : "Authentication Failed. Wrong Password.",
  "history_begin_time" : 1642608917193,
  "history_end_time" : 1642608917209,
  "history_notes" : null,
  "history_process" : "li3z29",
  "host_id" : "100001",
  "indicator" : "Failed"
},{
  "history_id" : "wq8ea5jdwyl",
  "history_input" : "from snowex_nsidc_search import * \n\n\n\n#Set NSIDC data access base URL\nbase_url = 'https://n5eil02u.ecs.nsidc.org/egi/request'\n\n#Set the request mode to asynchronous, \"no\" processing agent (no subsetting or reformatting services available), and optionally removing metadata delivery\n\nparam_dict['request_mode'] = 'async'\nparam_dict['agent'] = 'NO'\nparam_dict['INCLUDE_META'] ='N' #optional if you do not wish to receive the associated metadata files with each science file. \n\nparam_string = '&'.join(\"{!s}={!r}\".format(k,v) for (k,v) in param_dict.items()) # Convert param_dict to string\nparam_string = param_string.replace(\"'\",\"\") # Remove quotes\n\napi_list = [f'{base_url}?{param_string}']\napi_request = api_list[0]\nprint(api_request) # Print API base URL + request parameters\n\n# Start authenticated session with Earthdata Login to allow for data downloads:\ndef setup_earthdata_login_auth(endpoint: str='urs.earthdata.nasa.gov'):\n    netrc_name = \"_netrc\" if system()==\"Windows\" else \".netrc\"\n    try:\n        username, _, password = netrc.netrc(file=join(expanduser('~'), netrc_name)).authenticators(endpoint)\n    except (FileNotFoundError, TypeError):\n        print('Please provide your Earthdata Login credentials for access.')\n        print('Your info will only be passed to %s and will not be exposed in Jupyter.' % (endpoint))\n        username = input('Username: ')\n        password = getpass('Password: ')\n    manager = request.HTTPPasswordMgrWithDefaultRealm()\n    manager.add_password(None, endpoint, username, password)\n    auth = request.HTTPBasicAuthHandler(manager)\n    jar = CookieJar()\n    processor = request.HTTPCookieProcessor(jar)\n    opener = request.build_opener(auth, processor)\n    request.install_opener(opener)\n\nsetup_earthdata_login_auth(endpoint=\"urs.earthdata.nasa.gov\")\n\n\ndef request_nsidc_data(API_request):\n    \"\"\"\n    Performs a data customization and access request from NSIDC's API/\n    Creates an output folder in the working directory if one does not already exist.\n    \n    :API_request: NSIDC API endpoint; see https://nsidc.org/support/how/how-do-i-programmatically-request-data-services for more info\n    on how to configure the API request.\n    \n    \"\"\"\n\n    path = str(f'{datadir}') # Create an output folder if the folder does not already exist.\n    if not os.path.exists(path):\n        os.mkdir(path)\n        \n    base_url = 'https://n5eil02u.ecs.nsidc.org/egi/request'\n\n    \n    r = request.urlopen(API_request)\n    esir_root = ET.fromstring(r.read())\n    orderlist = []   # Look up order ID\n    for order in esir_root.findall(\"./order/\"):\n        orderlist.append(order.text)\n    orderID = orderlist[0]\n    statusURL = base_url + '/' + orderID # Create status URL\n    print('Order status URL: ', statusURL)\n    request_response = request.urlopen(statusURL) # Find order status  \n    request_root = ET.fromstring(request_response.read())\n    statuslist = []\n    for status in request_root.findall(\"./requestStatus/\"):\n        statuslist.append(status.text)\n    status = statuslist[0]\n    while status == 'pending' or status == 'processing': #Continue loop while request is still processing\n        print('Job status is ', status,'. Trying again.')\n        time.sleep(10)\n        loop_response = request.urlopen(statusURL)\n        loop_root = ET.fromstring(loop_response.read())\n        statuslist = [] #find status\n        for status in loop_root.findall(\"./requestStatus/\"):\n            statuslist.append(status.text)\n        status = statuslist[0]\n        if status == 'pending' or status == 'processing':\n            continue\n    if status == 'complete_with_errors' or status == 'failed': # Provide complete_with_errors error message:\n        messagelist = []\n        for message in loop_root.findall(\"./processInfo/\"):\n            messagelist.append(message.text)\n        print('Job status is ', status)\n        print('error messages:')\n        pprint(messagelist)\n    if status == 'complete' or status == 'complete_with_errors':# Download zipped order if status is complete or complete_with_errors\n        downloadURL = 'https://n5eil02u.ecs.nsidc.org/esir/' + orderID + '.zip'\n        print('Job status is ', status)\n        print('Zip download URL: ', downloadURL)\n        print('Beginning download of zipped output...')\n        zip_response = request.urlopen(downloadURL)\n        with zipfile.ZipFile(io.BytesIO(zip_response.read())) as z:\n            z.extractall(path)\n        print('Download is complete.')\n    else: print('Request failed.')\n    \n    # Clean up Outputs folder by removing individual granule folders \n    for root, dirs, files in os.walk(path, topdown=False):\n        for file in files:\n            try:\n                shutil.move(os.path.join(root, file), path)\n            except OSError:\n                pass\n        for name in dirs:\n            os.rmdir(os.path.join(root, name))\n    return  \n\n\n# NOTE: downloads ~ 200MB of CSV files\nrequest_nsidc_data(api_request)",
  "history_output" : "Polygon coordinates to be used in search: -108.2352445938561,38.98556907427165,-107.85284607930835,38.978765032966244,-107.85494925720668,39.10596902171742,-108.22772795408136,39.11294532581687,-108.2352445938561,38.98556907427165\nFound 3 files\nThe total size of all files is 209.20 MB\n{'feed': {'updated': '2022-01-19T16:10:05.836Z', 'id': 'https://cmr.earthdata.nasa.gov:443/search/granules.json?short_name=SNEX17_GPR&version=2&polygon=-108.2352445938561%2C38.98556907427165%2C-107.85284607930835%2C38.978765032966244%2C-107.85494925720668%2C39.10596902171742%2C-108.22772795408136%2C39.11294532581687%2C-108.2352445938561%2C38.98556907427165&temporal=2017-01-01T00%3A00%3A00Z%2C2017-12-31T23%3A59%3A59Z', 'title': 'ECHO granule metadata', 'entry': [{'producer_granule_id': 'SnowEx17_GPR_Version2_Week1.csv', 'time_start': '2017-02-08T00:00:00.000Z', 'updated': '2019-11-20T14:19:39.156Z', 'dataset_id': 'SnowEx17 Ground Penetrating Radar V002', 'data_center': 'NSIDC_ECS', 'title': 'SC:SNEX17_GPR.002:167128516', 'coordinate_system': 'GEODETIC', 'day_night_flag': 'UNSPECIFIED', 'time_end': '2017-02-10T23:59:59.000Z', 'id': 'G1657541380-NSIDC_ECS', 'original_format': 'ECHO10', 'granule_size': '57.3195', 'browse_flag': False, 'polygons': [['39.05189 -108.06789 39.04958 -108.07092 39.02644 -108.13422 39.04032 -108.18504 39.0357 -108.2211 39.01719 -108.21534 38.99637 -108.18261 39.00562 -108.11049 39.02413 -108.06225 39.03338 -108.06213 39.02876 -108.08619 39.04264 -108.05301 39.05189 -108.05289 39.0542 -108.06786 39.05189 -108.06789']], 'collection_concept_id': 'C1655875737-NSIDC_ECS', 'online_access_flag': True, 'links': [{'rel': 'http://esipfed.org/ns/fedsearch/1.1/data#', 'type': 'text/plain', 'hreflang': 'en-US', 'href': 'https://n5eil01u.ecs.nsidc.org/DP1/SNOWEX/SNEX17_GPR.002/2017.02.08/SnowEx17_GPR_Version2_Week1.csv'}, {'rel': 'http://esipfed.org/ns/fedsearch/1.1/metadata#', 'type': 'text/xml', 'title': '(METADATA)', 'hreflang': 'en-US', 'href': 'https://n5eil01u.ecs.nsidc.org/DP1/SNOWEX/SNEX17_GPR.002/2017.02.08/SnowEx17_GPR_Version2_Week1.csv.xml'}, {'inherited': True, 'length': '0.0KB', 'rel': 'http://esipfed.org/ns/fedsearch/1.1/data#', 'hreflang': 'en-US', 'href': 'https://n5eil01u.ecs.nsidc.org/SNOWEX/SNEX17_GPR.002/'}, {'inherited': True, 'length': '0.0KB', 'rel': 'http://esipfed.org/ns/fedsearch/1.1/data#', 'hreflang': 'en-US', 'href': 'https://search.earthdata.nasa.gov/search/granules?p=C1655875737-NSIDC_ECS&q=SNEX17_GPR&m=29.76382409255042!-108.823974609375!4!1!0!0%2C2&tl=1558474061!4!!'}, {'inherited': True, 'length': '0.0KB', 'rel': 'http://esipfed.org/ns/fedsearch/1.1/data#', 'hreflang': 'en-US', 'href': 'https://nsidc.org/data/data-access-tool/SNEX17_GPR/versions/2/'}, {'inherited': True, 'rel': 'http://esipfed.org/ns/fedsearch/1.1/metadata#', 'hreflang': 'en-US', 'href': 'https://doi.org/10.5067/G21LGCNLFSC5'}, {'inherited': True, 'rel': 'http://esipfed.org/ns/fedsearch/1.1/documentation#', 'hreflang': 'en-US', 'href': 'https://doi.org/10.5067/G21LGCNLFSC5'}]}, {'producer_granule_id': 'SnowEx17_GPR_Version2_Week2.csv', 'time_start': '2017-02-14T00:00:00.000Z', 'updated': '2019-11-20T14:19:39.156Z', 'dataset_id': 'SnowEx17 Ground Penetrating Radar V002', 'data_center': 'NSIDC_ECS', 'title': 'SC:SNEX17_GPR.002:167128520', 'coordinate_system': 'GEODETIC', 'day_night_flag': 'UNSPECIFIED', 'time_end': '2017-02-17T23:59:59.000Z', 'id': 'G1657541238-NSIDC_ECS', 'original_format': 'ECHO10', 'granule_size': '85.516', 'browse_flag': False, 'polygons': [['39.10738 -107.88943 39.10738 -107.89539 39.0912 -107.95508 39.07271 -108.02372 39.0542 -108.09234 39.04264 -108.16078 39.0357 -108.2113 39.03338 -108.2113 39.0195 -108.20533 39.00099 -108.18454 39.00099 -108.12811 39.00099 -108.08653 39.02644 -108.02094 39.0357 -107.94938 39.02413 -107.93155 39.04726 -107.89867 39.08195 -107.85677 39.10507 -107.86257 39.10969 -107.88644 39.10738 -107.88943']], 'collection_concept_id': 'C1655875737-NSIDC_ECS', 'online_access_flag': True, 'links': [{'rel': 'http://esipfed.org/ns/fedsearch/1.1/data#', 'type': 'text/plain', 'hreflang': 'en-US', 'href': 'https://n5eil01u.ecs.nsidc.org/DP1/SNOWEX/SNEX17_GPR.002/2017.02.14/SnowEx17_GPR_Version2_Week2.csv'}, {'rel': 'http://esipfed.org/ns/fedsearch/1.1/metadata#', 'type': 'text/xml', 'title': '(METADATA)', 'hreflang': 'en-US', 'href': 'https://n5eil01u.ecs.nsidc.org/DP1/SNOWEX/SNEX17_GPR.002/2017.02.14/SnowEx17_GPR_Version2_Week2.csv.xml'}, {'inherited': True, 'length': '0.0KB', 'rel': 'http://esipfed.org/ns/fedsearch/1.1/data#', 'hreflang': 'en-US', 'href': 'https://n5eil01u.ecs.nsidc.org/SNOWEX/SNEX17_GPR.002/'}, {'inherited': True, 'length': '0.0KB', 'rel': 'http://esipfed.org/ns/fedsearch/1.1/data#', 'hreflang': 'en-US', 'href': 'https://search.earthdata.nasa.gov/search/granules?p=C1655875737-NSIDC_ECS&q=SNEX17_GPR&m=29.76382409255042!-108.823974609375!4!1!0!0%2C2&tl=1558474061!4!!'}, {'inherited': True, 'length': '0.0KB', 'rel': 'http://esipfed.org/ns/fedsearch/1.1/data#', 'hreflang': 'en-US', 'href': 'https://nsidc.org/data/data-access-tool/SNEX17_GPR/versions/2/'}, {'inherited': True, 'rel': 'http://esipfed.org/ns/fedsearch/1.1/metadata#', 'hreflang': 'en-US', 'href': 'https://doi.org/10.5067/G21LGCNLFSC5'}, {'inherited': True, 'rel': 'http://esipfed.org/ns/fedsearch/1.1/documentation#', 'hreflang': 'en-US', 'href': 'https://doi.org/10.5067/G21LGCNLFSC5'}]}, {'producer_granule_id': 'SnowEx17_GPR_Version2_Week3.csv', 'time_start': '2017-02-21T00:00:00.000Z', 'updated': '2020-02-18T12:25:16.785Z', 'dataset_id': 'SnowEx17 Ground Penetrating Radar V002', 'data_center': 'NSIDC_ECS', 'title': 'SC:SNEX17_GPR.002:173252482', 'coordinate_system': 'GEODETIC', 'day_night_flag': 'UNSPECIFIED', 'time_end': '2017-02-25T23:59:59.000Z', 'id': 'G1694922459-NSIDC_ECS', 'original_format': 'ECHO10', 'granule_size': '66.3598', 'browse_flag': False, 'polygons': [['39.05189 -108.06789 39.04958 -108.06792 39.03107 -108.08616 39.0195 -108.15531 39.00331 -108.14352 39.00562 -108.11049 39.00562 -108.05349 39.01719 -108.05334 39.02876 -108.02919 39.0542 -108.05586 39.0542 -108.06786 39.05189 -108.06789']], 'collection_concept_id': 'C1655875737-NSIDC_ECS', 'online_access_flag': True, 'links': [{'rel': 'http://esipfed.org/ns/fedsearch/1.1/data#', 'type': 'text/plain', 'hreflang': 'en-US', 'href': 'https://n5eil01u.ecs.nsidc.org/DP1/SNOWEX/SNEX17_GPR.002/2017.02.21/SnowEx17_GPR_Version2_Week3.csv'}, {'rel': 'http://esipfed.org/ns/fedsearch/1.1/metadata#', 'type': 'text/xml', 'title': '(METADATA)', 'hreflang': 'en-US', 'href': 'https://n5eil01u.ecs.nsidc.org/DP1/SNOWEX/SNEX17_GPR.002/2017.02.21/SnowEx17_GPR_Version2_Week3.csv.xml'}, {'inherited': True, 'length': '0.0KB', 'rel': 'http://esipfed.org/ns/fedsearch/1.1/data#', 'hreflang': 'en-US', 'href': 'https://n5eil01u.ecs.nsidc.org/SNOWEX/SNEX17_GPR.002/'}, {'inherited': True, 'length': '0.0KB', 'rel': 'http://esipfed.org/ns/fedsearch/1.1/data#', 'hreflang': 'en-US', 'href': 'https://search.earthdata.nasa.gov/search/granules?p=C1655875737-NSIDC_ECS&q=SNEX17_GPR&m=29.76382409255042!-108.823974609375!4!1!0!0%2C2&tl=1558474061!4!!'}, {'inherited': True, 'length': '0.0KB', 'rel': 'http://esipfed.org/ns/fedsearch/1.1/data#', 'hreflang': 'en-US', 'href': 'https://nsidc.org/data/data-access-tool/SNEX17_GPR/versions/2/'}, {'inherited': True, 'rel': 'http://esipfed.org/ns/fedsearch/1.1/metadata#', 'hreflang': 'en-US', 'href': 'https://doi.org/10.5067/G21LGCNLFSC5'}, {'inherited': True, 'rel': 'http://esipfed.org/ns/fedsearch/1.1/documentation#', 'hreflang': 'en-US', 'href': 'https://doi.org/10.5067/G21LGCNLFSC5'}]}]}}\nhttps://n5eil02u.ecs.nsidc.org/egi/request?short_name=SNEX17_GPR&version=2&polygon=-108.2352445938561,38.98556907427165,-107.85284607930835,38.978765032966244,-107.85494925720668,39.10596902171742,-108.22772795408136,39.11294532581687,-108.2352445938561,38.98556907427165&temporal=2017-01-01T00:00:00Z,2017-12-31T23:59:59Z&request_mode=async&agent=NO&INCLUDE_META=N\nOrder status URL:  https://n5eil02u.ecs.nsidc.org/egi/request/5000002721603\nJob status is  complete\nZip download URL:  https://n5eil02u.ecs.nsidc.org/esir/5000002721603.zip\nBeginning download of zipped output...\nDownload is complete.\nTraceback (most recent call last):\n  File \"/Users/joe/gw-workspace/yBJFsMRVjtT5C47gkJdsALU85n/snowex_nsidc_download_api.py\", line 115, in <module>\n    request_nsidc_data(api_request)\n  File \"/Users/joe/gw-workspace/yBJFsMRVjtT5C47gkJdsALU85n/snowex_nsidc_download_api.py\", line 110, in request_nsidc_data\n    os.rmdir(os.path.join(root, name))\nOSError: [Errno 66] Directory not empty: '/Users/joe/Documents/data/173252482'\n",
  "history_begin_time" : 1642608604775,
  "history_end_time" : 1642608619548,
  "history_notes" : null,
  "history_process" : "li3z29",
  "host_id" : "100001",
  "indicator" : "Done"
},{
  "history_id" : "lt4vbaf285p",
  "history_input" : "from snowex_nsidc_search import * \n\n\n\n#Set NSIDC data access base URL\nbase_url = 'https://n5eil02u.ecs.nsidc.org/egi/request'\n\n#Set the request mode to asynchronous, \"no\" processing agent (no subsetting or reformatting services available), and optionally removing metadata delivery\n\nparam_dict['request_mode'] = 'async'\nparam_dict['agent'] = 'NO'\nparam_dict['INCLUDE_META'] ='N' #optional if you do not wish to receive the associated metadata files with each science file. \n\nparam_string = '&'.join(\"{!s}={!r}\".format(k,v) for (k,v) in param_dict.items()) # Convert param_dict to string\nparam_string = param_string.replace(\"'\",\"\") # Remove quotes\n\napi_list = [f'{base_url}?{param_string}']\napi_request = api_list[0]\nprint(api_request) # Print API base URL + request parameters\n\n# Start authenticated session with Earthdata Login to allow for data downloads:\ndef setup_earthdata_login_auth(endpoint: str='urs.earthdata.nasa.gov'):\n    netrc_name = \"_netrc\" if system()==\"Windows\" else \".netrc\"\n    try:\n        username, _, password = netrc.netrc(file=join(expanduser('~'), netrc_name)).authenticators(endpoint)\n    except (FileNotFoundError, TypeError):\n        print('Please provide your Earthdata Login credentials for access.')\n        print('Your info will only be passed to %s and will not be exposed in Jupyter.' % (endpoint))\n        username = input('Username: ')\n        password = getpass('Password: ')\n    manager = request.HTTPPasswordMgrWithDefaultRealm()\n    manager.add_password(None, endpoint, username, password)\n    auth = request.HTTPBasicAuthHandler(manager)\n    jar = CookieJar()\n    processor = request.HTTPCookieProcessor(jar)\n    opener = request.build_opener(auth, processor)\n    request.install_opener(opener)\n\nsetup_earthdata_login_auth(endpoint=\"urs.earthdata.nasa.gov\")\n\n\ndef request_nsidc_data(API_request):\n    \"\"\"\n    Performs a data customization and access request from NSIDC's API/\n    Creates an output folder in the working directory if one does not already exist.\n    \n    :API_request: NSIDC API endpoint; see https://nsidc.org/support/how/how-do-i-programmatically-request-data-services for more info\n    on how to configure the API request.\n    \n    \"\"\"\n\n    path = str(f'{datadir}') # Create an output folder if the folder does not already exist.\n    if not os.path.exists(path):\n        os.mkdir(path)\n        \n    base_url = 'https://n5eil02u.ecs.nsidc.org/egi/request'\n\n    \n    r = request.urlopen(API_request)\n    esir_root = ET.fromstring(r.read())\n    orderlist = []   # Look up order ID\n    for order in esir_root.findall(\"./order/\"):\n        orderlist.append(order.text)\n    orderID = orderlist[0]\n    statusURL = base_url + '/' + orderID # Create status URL\n    print('Order status URL: ', statusURL)\n    request_response = request.urlopen(statusURL) # Find order status  \n    request_root = ET.fromstring(request_response.read())\n    statuslist = []\n    for status in request_root.findall(\"./requestStatus/\"):\n        statuslist.append(status.text)\n    status = statuslist[0]\n    while status == 'pending' or status == 'processing': #Continue loop while request is still processing\n        print('Job status is ', status,'. Trying again.')\n        time.sleep(10)\n        loop_response = request.urlopen(statusURL)\n        loop_root = ET.fromstring(loop_response.read())\n        statuslist = [] #find status\n        for status in loop_root.findall(\"./requestStatus/\"):\n            statuslist.append(status.text)\n        status = statuslist[0]\n        if status == 'pending' or status == 'processing':\n            continue\n    if status == 'complete_with_errors' or status == 'failed': # Provide complete_with_errors error message:\n        messagelist = []\n        for message in loop_root.findall(\"./processInfo/\"):\n            messagelist.append(message.text)\n        print('Job status is ', status)\n        print('error messages:')\n        pprint(messagelist)\n    if status == 'complete' or status == 'complete_with_errors':# Download zipped order if status is complete or complete_with_errors\n        downloadURL = 'https://n5eil02u.ecs.nsidc.org/esir/' + orderID + '.zip'\n        print('Job status is ', status)\n        print('Zip download URL: ', downloadURL)\n        print('Beginning download of zipped output...')\n        zip_response = request.urlopen(downloadURL)\n        with zipfile.ZipFile(io.BytesIO(zip_response.read())) as z:\n            z.extractall(path)\n        print('Download is complete.')\n    else: print('Request failed.')\n    \n    # Clean up Outputs folder by removing individual granule folders \n    for root, dirs, files in os.walk(path, topdown=False):\n        for file in files:\n            try:\n                shutil.move(os.path.join(root, file), path)\n            except OSError:\n                pass\n        for name in dirs:\n            os.rmdir(os.path.join(root, name))\n    return  \n\n\n# NOTE: downloads ~ 200MB of CSV files\nrequest_nsidc_data(api_request)",
  "history_output" : "  File \"snowex_nsidc_download_api.py\", line 17\n    api_list = [f'{base_url}?{param_string}']\n                                           ^\nSyntaxError: invalid syntax\n",
  "history_begin_time" : 1642607497216,
  "history_end_time" : 1642607497384,
  "history_notes" : null,
  "history_process" : "li3z29",
  "host_id" : "100001",
  "indicator" : "Done"
},{
  "history_id" : "6johdsn3uj3",
  "history_input" : null,
  "history_output" : "Authentication Failed. Wrong Password.",
  "history_begin_time" : 1642607463464,
  "history_end_time" : 1642607463523,
  "history_notes" : null,
  "history_process" : "li3z29",
  "host_id" : "100001",
  "indicator" : "Failed"
},{
  "history_id" : "t7evjn9ooci",
  "history_input" : null,
  "history_output" : "Authentication Failed. Wrong Password.",
  "history_begin_time" : 1642606601923,
  "history_end_time" : 1642606602045,
  "history_notes" : null,
  "history_process" : "li3z29",
  "host_id" : "100001",
  "indicator" : "Failed"
},{
  "history_id" : "dfvny9zv6sc",
  "history_input" : null,
  "history_output" : "Authentication Failed. Wrong Password.",
  "history_begin_time" : 1642606579298,
  "history_end_time" : 1642606579410,
  "history_notes" : null,
  "history_process" : "li3z29",
  "host_id" : "100001",
  "indicator" : "Failed"
},{
  "history_id" : "tuu6mwhlb3k",
  "history_input" : null,
  "history_output" : "Authentication Failed. Wrong Password.",
  "history_begin_time" : 1642606524577,
  "history_end_time" : 1642606524763,
  "history_notes" : null,
  "history_process" : "li3z29",
  "host_id" : "100001",
  "indicator" : "Failed"
},{
  "history_id" : "jzu7fuyhy81",
  "history_input" : null,
  "history_output" : "Authentication Failed. Wrong Password.",
  "history_begin_time" : 1642606501885,
  "history_end_time" : 1642606502109,
  "history_notes" : null,
  "history_process" : "li3z29",
  "host_id" : "100001",
  "indicator" : "Failed"
},{
  "history_id" : "isfw493ii1a",
  "history_input" : null,
  "history_output" : "Authentication Failed. Wrong Password.",
  "history_begin_time" : 1642606454553,
  "history_end_time" : 1642606454722,
  "history_notes" : null,
  "history_process" : "li3z29",
  "host_id" : "100001",
  "indicator" : "Failed"
},{
  "history_id" : "25kl9fmndvg",
  "history_input" : "from snowex_nsidc_search import * \n\n\n\n#Set NSIDC data access base URL\nbase_url = 'https://n5eil02u.ecs.nsidc.org/egi/request'\n\n#Set the request mode to asynchronous, \"no\" processing agent (no subsetting or reformatting services available), and optionally removing metadata delivery\n\nparam_dict['request_mode'] = 'async'\nparam_dict['agent'] = 'NO'\nparam_dict['INCLUDE_META'] ='N' #optional if you do not wish to receive the associated metadata files with each science file. \n\nparam_string = '&'.join(\"{!s}={!r}\".format(k,v) for (k,v) in param_dict.items()) # Convert param_dict to string\nparam_string = param_string.replace(\"'\",\"\") # Remove quotes\n\napi_list = [f'{base_url}?{param_string}']\napi_request = api_list[0]\nprint(api_request) # Print API base URL + request parameters\n\n# Start authenticated session with Earthdata Login to allow for data downloads:\ndef setup_earthdata_login_auth(endpoint: str='urs.earthdata.nasa.gov'):\n    netrc_name = \"_netrc\" if system()==\"Windows\" else \".netrc\"\n    try:\n        username, _, password = netrc.netrc(file=join(expanduser('~'), netrc_name)).authenticators(endpoint)\n    except (FileNotFoundError, TypeError):\n        print('Please provide your Earthdata Login credentials for access.')\n        print('Your info will only be passed to %s and will not be exposed in Jupyter.' % (endpoint))\n        username = input('Username: ')\n        password = getpass('Password: ')\n    manager = request.HTTPPasswordMgrWithDefaultRealm()\n    manager.add_password(None, endpoint, username, password)\n    auth = request.HTTPBasicAuthHandler(manager)\n    jar = CookieJar()\n    processor = request.HTTPCookieProcessor(jar)\n    opener = request.build_opener(auth, processor)\n    request.install_opener(opener)\n\nsetup_earthdata_login_auth(endpoint=\"urs.earthdata.nasa.gov\")\n\n\ndef request_nsidc_data(API_request):\n    \"\"\"\n    Performs a data customization and access request from NSIDC's API/\n    Creates an output folder in the working directory if one does not already exist.\n    \n    :API_request: NSIDC API endpoint; see https://nsidc.org/support/how/how-do-i-programmatically-request-data-services for more info\n    on how to configure the API request.\n    \n    \"\"\"\n\n    path = str(f'{datadir}') # Create an output folder if the folder does not already exist.\n    if not os.path.exists(path):\n        os.mkdir(path)\n        \n    base_url = 'https://n5eil02u.ecs.nsidc.org/egi/request'\n\n    \n    r = request.urlopen(API_request)\n    esir_root = ET.fromstring(r.read())\n    orderlist = []   # Look up order ID\n    for order in esir_root.findall(\"./order/\"):\n        orderlist.append(order.text)\n    orderID = orderlist[0]\n    statusURL = base_url + '/' + orderID # Create status URL\n    print('Order status URL: ', statusURL)\n    request_response = request.urlopen(statusURL) # Find order status  \n    request_root = ET.fromstring(request_response.read())\n    statuslist = []\n    for status in request_root.findall(\"./requestStatus/\"):\n        statuslist.append(status.text)\n    status = statuslist[0]\n    while status == 'pending' or status == 'processing': #Continue loop while request is still processing\n        print('Job status is ', status,'. Trying again.')\n        time.sleep(10)\n        loop_response = request.urlopen(statusURL)\n        loop_root = ET.fromstring(loop_response.read())\n        statuslist = [] #find status\n        for status in loop_root.findall(\"./requestStatus/\"):\n            statuslist.append(status.text)\n        status = statuslist[0]\n        if status == 'pending' or status == 'processing':\n            continue\n    if status == 'complete_with_errors' or status == 'failed': # Provide complete_with_errors error message:\n        messagelist = []\n        for message in loop_root.findall(\"./processInfo/\"):\n            messagelist.append(message.text)\n        print('Job status is ', status)\n        print('error messages:')\n        pprint(messagelist)\n    if status == 'complete' or status == 'complete_with_errors':# Download zipped order if status is complete or complete_with_errors\n        downloadURL = 'https://n5eil02u.ecs.nsidc.org/esir/' + orderID + '.zip'\n        print('Job status is ', status)\n        print('Zip download URL: ', downloadURL)\n        print('Beginning download of zipped output...')\n        zip_response = request.urlopen(downloadURL)\n        with zipfile.ZipFile(io.BytesIO(zip_response.read())) as z:\n            z.extractall(path)\n        print('Download is complete.')\n    else: print('Request failed.')\n    \n    # Clean up Outputs folder by removing individual granule folders \n    for root, dirs, files in os.walk(path, topdown=False):\n        for file in files:\n            try:\n                shutil.move(os.path.join(root, file), path)\n            except OSError:\n                pass\n        for name in dirs:\n            os.rmdir(os.path.join(root, name))\n    return  \n\n\n# NOTE: downloads ~ 200MB of CSV files\nrequest_nsidc_data(api_request)",
  "history_output" : "Polygon coordinates to be used in search: -108.2352445938561,38.98556907427165,-107.85284607930835,38.978765032966244,-107.85494925720668,39.10596902171742,-108.22772795408136,39.11294532581687,-108.2352445938561,38.98556907427165\nFound 3 files\nThe total size of all files is 209.20 MB\n{'feed': {'updated': '2022-01-19T09:22:28.840Z', 'id': 'https://cmr.earthdata.nasa.gov:443/search/granules.json?short_name=SNEX17_GPR&version=2&polygon=-108.2352445938561%2C38.98556907427165%2C-107.85284607930835%2C38.978765032966244%2C-107.85494925720668%2C39.10596902171742%2C-108.22772795408136%2C39.11294532581687%2C-108.2352445938561%2C38.98556907427165&temporal=2017-01-01T00%3A00%3A00Z%2C2017-12-31T23%3A59%3A59Z', 'title': 'ECHO granule metadata', 'entry': [{'producer_granule_id': 'SnowEx17_GPR_Version2_Week1.csv', 'time_start': '2017-02-08T00:00:00.000Z', 'updated': '2019-11-20T14:19:39.156Z', 'dataset_id': 'SnowEx17 Ground Penetrating Radar V002', 'data_center': 'NSIDC_ECS', 'title': 'SC:SNEX17_GPR.002:167128516', 'coordinate_system': 'GEODETIC', 'day_night_flag': 'UNSPECIFIED', 'time_end': '2017-02-10T23:59:59.000Z', 'id': 'G1657541380-NSIDC_ECS', 'original_format': 'ECHO10', 'granule_size': '57.3195', 'browse_flag': False, 'polygons': [['39.05189 -108.06789 39.04958 -108.07092 39.02644 -108.13422 39.04032 -108.18504 39.0357 -108.2211 39.01719 -108.21534 38.99637 -108.18261 39.00562 -108.11049 39.02413 -108.06225 39.03338 -108.06213 39.02876 -108.08619 39.04264 -108.05301 39.05189 -108.05289 39.0542 -108.06786 39.05189 -108.06789']], 'collection_concept_id': 'C1655875737-NSIDC_ECS', 'online_access_flag': True, 'links': [{'rel': 'http://esipfed.org/ns/fedsearch/1.1/data#', 'type': 'text/plain', 'hreflang': 'en-US', 'href': 'https://n5eil01u.ecs.nsidc.org/DP1/SNOWEX/SNEX17_GPR.002/2017.02.08/SnowEx17_GPR_Version2_Week1.csv'}, {'rel': 'http://esipfed.org/ns/fedsearch/1.1/metadata#', 'type': 'text/xml', 'title': '(METADATA)', 'hreflang': 'en-US', 'href': 'https://n5eil01u.ecs.nsidc.org/DP1/SNOWEX/SNEX17_GPR.002/2017.02.08/SnowEx17_GPR_Version2_Week1.csv.xml'}, {'inherited': True, 'length': '0.0KB', 'rel': 'http://esipfed.org/ns/fedsearch/1.1/data#', 'hreflang': 'en-US', 'href': 'https://n5eil01u.ecs.nsidc.org/SNOWEX/SNEX17_GPR.002/'}, {'inherited': True, 'length': '0.0KB', 'rel': 'http://esipfed.org/ns/fedsearch/1.1/data#', 'hreflang': 'en-US', 'href': 'https://search.earthdata.nasa.gov/search/granules?p=C1655875737-NSIDC_ECS&q=SNEX17_GPR&m=29.76382409255042!-108.823974609375!4!1!0!0%2C2&tl=1558474061!4!!'}, {'inherited': True, 'length': '0.0KB', 'rel': 'http://esipfed.org/ns/fedsearch/1.1/data#', 'hreflang': 'en-US', 'href': 'https://nsidc.org/data/data-access-tool/SNEX17_GPR/versions/2/'}, {'inherited': True, 'rel': 'http://esipfed.org/ns/fedsearch/1.1/metadata#', 'hreflang': 'en-US', 'href': 'https://doi.org/10.5067/G21LGCNLFSC5'}, {'inherited': True, 'rel': 'http://esipfed.org/ns/fedsearch/1.1/documentation#', 'hreflang': 'en-US', 'href': 'https://doi.org/10.5067/G21LGCNLFSC5'}]}, {'producer_granule_id': 'SnowEx17_GPR_Version2_Week2.csv', 'time_start': '2017-02-14T00:00:00.000Z', 'updated': '2019-11-20T14:19:39.156Z', 'dataset_id': 'SnowEx17 Ground Penetrating Radar V002', 'data_center': 'NSIDC_ECS', 'title': 'SC:SNEX17_GPR.002:167128520', 'coordinate_system': 'GEODETIC', 'day_night_flag': 'UNSPECIFIED', 'time_end': '2017-02-17T23:59:59.000Z', 'id': 'G1657541238-NSIDC_ECS', 'original_format': 'ECHO10', 'granule_size': '85.516', 'browse_flag': False, 'polygons': [['39.10738 -107.88943 39.10738 -107.89539 39.0912 -107.95508 39.07271 -108.02372 39.0542 -108.09234 39.04264 -108.16078 39.0357 -108.2113 39.03338 -108.2113 39.0195 -108.20533 39.00099 -108.18454 39.00099 -108.12811 39.00099 -108.08653 39.02644 -108.02094 39.0357 -107.94938 39.02413 -107.93155 39.04726 -107.89867 39.08195 -107.85677 39.10507 -107.86257 39.10969 -107.88644 39.10738 -107.88943']], 'collection_concept_id': 'C1655875737-NSIDC_ECS', 'online_access_flag': True, 'links': [{'rel': 'http://esipfed.org/ns/fedsearch/1.1/data#', 'type': 'text/plain', 'hreflang': 'en-US', 'href': 'https://n5eil01u.ecs.nsidc.org/DP1/SNOWEX/SNEX17_GPR.002/2017.02.14/SnowEx17_GPR_Version2_Week2.csv'}, {'rel': 'http://esipfed.org/ns/fedsearch/1.1/metadata#', 'type': 'text/xml', 'title': '(METADATA)', 'hreflang': 'en-US', 'href': 'https://n5eil01u.ecs.nsidc.org/DP1/SNOWEX/SNEX17_GPR.002/2017.02.14/SnowEx17_GPR_Version2_Week2.csv.xml'}, {'inherited': True, 'length': '0.0KB', 'rel': 'http://esipfed.org/ns/fedsearch/1.1/data#', 'hreflang': 'en-US', 'href': 'https://n5eil01u.ecs.nsidc.org/SNOWEX/SNEX17_GPR.002/'}, {'inherited': True, 'length': '0.0KB', 'rel': 'http://esipfed.org/ns/fedsearch/1.1/data#', 'hreflang': 'en-US', 'href': 'https://search.earthdata.nasa.gov/search/granules?p=C1655875737-NSIDC_ECS&q=SNEX17_GPR&m=29.76382409255042!-108.823974609375!4!1!0!0%2C2&tl=1558474061!4!!'}, {'inherited': True, 'length': '0.0KB', 'rel': 'http://esipfed.org/ns/fedsearch/1.1/data#', 'hreflang': 'en-US', 'href': 'https://nsidc.org/data/data-access-tool/SNEX17_GPR/versions/2/'}, {'inherited': True, 'rel': 'http://esipfed.org/ns/fedsearch/1.1/metadata#', 'hreflang': 'en-US', 'href': 'https://doi.org/10.5067/G21LGCNLFSC5'}, {'inherited': True, 'rel': 'http://esipfed.org/ns/fedsearch/1.1/documentation#', 'hreflang': 'en-US', 'href': 'https://doi.org/10.5067/G21LGCNLFSC5'}]}, {'producer_granule_id': 'SnowEx17_GPR_Version2_Week3.csv', 'time_start': '2017-02-21T00:00:00.000Z', 'updated': '2020-02-18T12:25:16.785Z', 'dataset_id': 'SnowEx17 Ground Penetrating Radar V002', 'data_center': 'NSIDC_ECS', 'title': 'SC:SNEX17_GPR.002:173252482', 'coordinate_system': 'GEODETIC', 'day_night_flag': 'UNSPECIFIED', 'time_end': '2017-02-25T23:59:59.000Z', 'id': 'G1694922459-NSIDC_ECS', 'original_format': 'ECHO10', 'granule_size': '66.3598', 'browse_flag': False, 'polygons': [['39.05189 -108.06789 39.04958 -108.06792 39.03107 -108.08616 39.0195 -108.15531 39.00331 -108.14352 39.00562 -108.11049 39.00562 -108.05349 39.01719 -108.05334 39.02876 -108.02919 39.0542 -108.05586 39.0542 -108.06786 39.05189 -108.06789']], 'collection_concept_id': 'C1655875737-NSIDC_ECS', 'online_access_flag': True, 'links': [{'rel': 'http://esipfed.org/ns/fedsearch/1.1/data#', 'type': 'text/plain', 'hreflang': 'en-US', 'href': 'https://n5eil01u.ecs.nsidc.org/DP1/SNOWEX/SNEX17_GPR.002/2017.02.21/SnowEx17_GPR_Version2_Week3.csv'}, {'rel': 'http://esipfed.org/ns/fedsearch/1.1/metadata#', 'type': 'text/xml', 'title': '(METADATA)', 'hreflang': 'en-US', 'href': 'https://n5eil01u.ecs.nsidc.org/DP1/SNOWEX/SNEX17_GPR.002/2017.02.21/SnowEx17_GPR_Version2_Week3.csv.xml'}, {'inherited': True, 'length': '0.0KB', 'rel': 'http://esipfed.org/ns/fedsearch/1.1/data#', 'hreflang': 'en-US', 'href': 'https://n5eil01u.ecs.nsidc.org/SNOWEX/SNEX17_GPR.002/'}, {'inherited': True, 'length': '0.0KB', 'rel': 'http://esipfed.org/ns/fedsearch/1.1/data#', 'hreflang': 'en-US', 'href': 'https://search.earthdata.nasa.gov/search/granules?p=C1655875737-NSIDC_ECS&q=SNEX17_GPR&m=29.76382409255042!-108.823974609375!4!1!0!0%2C2&tl=1558474061!4!!'}, {'inherited': True, 'length': '0.0KB', 'rel': 'http://esipfed.org/ns/fedsearch/1.1/data#', 'hreflang': 'en-US', 'href': 'https://nsidc.org/data/data-access-tool/SNEX17_GPR/versions/2/'}, {'inherited': True, 'rel': 'http://esipfed.org/ns/fedsearch/1.1/metadata#', 'hreflang': 'en-US', 'href': 'https://doi.org/10.5067/G21LGCNLFSC5'}, {'inherited': True, 'rel': 'http://esipfed.org/ns/fedsearch/1.1/documentation#', 'hreflang': 'en-US', 'href': 'https://doi.org/10.5067/G21LGCNLFSC5'}]}]}}\nhttps://n5eil02u.ecs.nsidc.org/egi/request?short_name=SNEX17_GPR&version=2&polygon=-108.2352445938561,38.98556907427165,-107.85284607930835,38.978765032966244,-107.85494925720668,39.10596902171742,-108.22772795408136,39.11294532581687,-108.2352445938561,38.98556907427165&temporal=2017-01-01T00:00:00Z,2017-12-31T23:59:59Z&request_mode=async&agent=NO&INCLUDE_META=N\nOrder status URL:  https://n5eil02u.ecs.nsidc.org/egi/request/5000002721516\nJob status is  complete\nZip download URL:  https://n5eil02u.ecs.nsidc.org/esir/5000002721516.zip\nBeginning download of zipped output...\nDownload is complete.\nTraceback (most recent call last):\n  File \"/Users/joe/gw-workspace/5L5i0zLodmJMcbde8UdMijLj1O/snowex_nsidc_download_api.py\", line 115, in <module>\n    request_nsidc_data(api_request)\n  File \"/Users/joe/gw-workspace/5L5i0zLodmJMcbde8UdMijLj1O/snowex_nsidc_download_api.py\", line 110, in request_nsidc_data\n    os.rmdir(os.path.join(root, name))\nOSError: [Errno 66] Directory not empty: '/Users/joe/Documents/data/173252482'\n",
  "history_begin_time" : 1642584147846,
  "history_end_time" : 1642584166003,
  "history_notes" : null,
  "history_process" : "li3z29",
  "host_id" : "100001",
  "indicator" : "Done"
},{
  "history_id" : "xj7uno6dud1",
  "history_input" : "from snowex_nsidc_search import * \n\n\n\n#Set NSIDC data access base URL\nbase_url = 'https://n5eil02u.ecs.nsidc.org/egi/request'\n\n#Set the request mode to asynchronous, \"no\" processing agent (no subsetting or reformatting services available), and optionally removing metadata delivery\n\nparam_dict['request_mode'] = 'async'\nparam_dict['agent'] = 'NO'\nparam_dict['INCLUDE_META'] ='N' #optional if you do not wish to receive the associated metadata files with each science file. \n\nparam_string = '&'.join(\"{!s}={!r}\".format(k,v) for (k,v) in param_dict.items()) # Convert param_dict to string\nparam_string = param_string.replace(\"'\",\"\") # Remove quotes\n\napi_list = [f'{base_url}?{param_string}']\napi_request = api_list[0]\nprint(api_request) # Print API base URL + request parameters\n\n# Start authenticated session with Earthdata Login to allow for data downloads:\ndef setup_earthdata_login_auth(endpoint: str='urs.earthdata.nasa.gov'):\n    netrc_name = \"_netrc\" if system()==\"Windows\" else \".netrc\"\n    try:\n        username, _, password = netrc.netrc(file=join(expanduser('~'), netrc_name)).authenticators(endpoint)\n    except (FileNotFoundError, TypeError):\n        print('Please provide your Earthdata Login credentials for access.')\n        print('Your info will only be passed to %s and will not be exposed in Jupyter.' % (endpoint))\n        username = input('Username: ')\n        password = getpass('Password: ')\n    manager = request.HTTPPasswordMgrWithDefaultRealm()\n    manager.add_password(None, endpoint, username, password)\n    auth = request.HTTPBasicAuthHandler(manager)\n    jar = CookieJar()\n    processor = request.HTTPCookieProcessor(jar)\n    opener = request.build_opener(auth, processor)\n    request.install_opener(opener)\n\nsetup_earthdata_login_auth(endpoint=\"urs.earthdata.nasa.gov\")\n\n\ndef request_nsidc_data(API_request):\n    \"\"\"\n    Performs a data customization and access request from NSIDC's API/\n    Creates an output folder in the working directory if one does not already exist.\n    \n    :API_request: NSIDC API endpoint; see https://nsidc.org/support/how/how-do-i-programmatically-request-data-services for more info\n    on how to configure the API request.\n    \n    \"\"\"\n\n    path = str(f'{datadir}') # Create an output folder if the folder does not already exist.\n    if not os.path.exists(path):\n        os.mkdir(path)\n        \n    base_url = 'https://n5eil02u.ecs.nsidc.org/egi/request'\n\n    \n    r = request.urlopen(API_request)\n    esir_root = ET.fromstring(r.read())\n    orderlist = []   # Look up order ID\n    for order in esir_root.findall(\"./order/\"):\n        orderlist.append(order.text)\n    orderID = orderlist[0]\n    statusURL = base_url + '/' + orderID # Create status URL\n    print('Order status URL: ', statusURL)\n    request_response = request.urlopen(statusURL) # Find order status  \n    request_root = ET.fromstring(request_response.read())\n    statuslist = []\n    for status in request_root.findall(\"./requestStatus/\"):\n        statuslist.append(status.text)\n    status = statuslist[0]\n    while status == 'pending' or status == 'processing': #Continue loop while request is still processing\n        print('Job status is ', status,'. Trying again.')\n        time.sleep(10)\n        loop_response = request.urlopen(statusURL)\n        loop_root = ET.fromstring(loop_response.read())\n        statuslist = [] #find status\n        for status in loop_root.findall(\"./requestStatus/\"):\n            statuslist.append(status.text)\n        status = statuslist[0]\n        if status == 'pending' or status == 'processing':\n            continue\n    if status == 'complete_with_errors' or status == 'failed': # Provide complete_with_errors error message:\n        messagelist = []\n        for message in loop_root.findall(\"./processInfo/\"):\n            messagelist.append(message.text)\n        print('Job status is ', status)\n        print('error messages:')\n        pprint(messagelist)\n    if status == 'complete' or status == 'complete_with_errors':# Download zipped order if status is complete or complete_with_errors\n        downloadURL = 'https://n5eil02u.ecs.nsidc.org/esir/' + orderID + '.zip'\n        print('Job status is ', status)\n        print('Zip download URL: ', downloadURL)\n        print('Beginning download of zipped output...')\n        zip_response = request.urlopen(downloadURL)\n        with zipfile.ZipFile(io.BytesIO(zip_response.read())) as z:\n            z.extractall(path)\n        print('Download is complete.')\n    else: print('Request failed.')\n    \n    # Clean up Outputs folder by removing individual granule folders \n    for root, dirs, files in os.walk(path, topdown=False):\n        for file in files:\n            try:\n                shutil.move(os.path.join(root, file), path)\n            except OSError:\n                pass\n        for name in dirs:\n            os.rmdir(os.path.join(root, name))\n    return  \n\n\n# NOTE: downloads ~ 200MB of CSV files\nrequest_nsidc_data(api_request)",
  "history_output" : "Polygon coordinates to be used in search: -108.2352445938561,38.98556907427165,-107.85284607930835,38.978765032966244,-107.85494925720668,39.10596902171742,-108.22772795408136,39.11294532581687,-108.2352445938561,38.98556907427165\nFound 3 files\nThe total size of all files is 209.20 MB\n{'feed': {'updated': '2022-01-19T08:09:18.554Z', 'id': 'https://cmr.earthdata.nasa.gov:443/search/granules.json?short_name=SNEX17_GPR&version=2&polygon=-108.2352445938561%2C38.98556907427165%2C-107.85284607930835%2C38.978765032966244%2C-107.85494925720668%2C39.10596902171742%2C-108.22772795408136%2C39.11294532581687%2C-108.2352445938561%2C38.98556907427165&temporal=2017-01-01T00%3A00%3A00Z%2C2017-12-31T23%3A59%3A59Z', 'title': 'ECHO granule metadata', 'entry': [{'producer_granule_id': 'SnowEx17_GPR_Version2_Week1.csv', 'time_start': '2017-02-08T00:00:00.000Z', 'updated': '2019-11-20T14:19:39.156Z', 'dataset_id': 'SnowEx17 Ground Penetrating Radar V002', 'data_center': 'NSIDC_ECS', 'title': 'SC:SNEX17_GPR.002:167128516', 'coordinate_system': 'GEODETIC', 'day_night_flag': 'UNSPECIFIED', 'time_end': '2017-02-10T23:59:59.000Z', 'id': 'G1657541380-NSIDC_ECS', 'original_format': 'ECHO10', 'granule_size': '57.3195', 'browse_flag': False, 'polygons': [['39.05189 -108.06789 39.04958 -108.07092 39.02644 -108.13422 39.04032 -108.18504 39.0357 -108.2211 39.01719 -108.21534 38.99637 -108.18261 39.00562 -108.11049 39.02413 -108.06225 39.03338 -108.06213 39.02876 -108.08619 39.04264 -108.05301 39.05189 -108.05289 39.0542 -108.06786 39.05189 -108.06789']], 'collection_concept_id': 'C1655875737-NSIDC_ECS', 'online_access_flag': True, 'links': [{'rel': 'http://esipfed.org/ns/fedsearch/1.1/data#', 'type': 'text/plain', 'hreflang': 'en-US', 'href': 'https://n5eil01u.ecs.nsidc.org/DP1/SNOWEX/SNEX17_GPR.002/2017.02.08/SnowEx17_GPR_Version2_Week1.csv'}, {'rel': 'http://esipfed.org/ns/fedsearch/1.1/metadata#', 'type': 'text/xml', 'title': '(METADATA)', 'hreflang': 'en-US', 'href': 'https://n5eil01u.ecs.nsidc.org/DP1/SNOWEX/SNEX17_GPR.002/2017.02.08/SnowEx17_GPR_Version2_Week1.csv.xml'}, {'inherited': True, 'length': '0.0KB', 'rel': 'http://esipfed.org/ns/fedsearch/1.1/data#', 'hreflang': 'en-US', 'href': 'https://n5eil01u.ecs.nsidc.org/SNOWEX/SNEX17_GPR.002/'}, {'inherited': True, 'length': '0.0KB', 'rel': 'http://esipfed.org/ns/fedsearch/1.1/data#', 'hreflang': 'en-US', 'href': 'https://search.earthdata.nasa.gov/search/granules?p=C1655875737-NSIDC_ECS&q=SNEX17_GPR&m=29.76382409255042!-108.823974609375!4!1!0!0%2C2&tl=1558474061!4!!'}, {'inherited': True, 'length': '0.0KB', 'rel': 'http://esipfed.org/ns/fedsearch/1.1/data#', 'hreflang': 'en-US', 'href': 'https://nsidc.org/data/data-access-tool/SNEX17_GPR/versions/2/'}, {'inherited': True, 'rel': 'http://esipfed.org/ns/fedsearch/1.1/metadata#', 'hreflang': 'en-US', 'href': 'https://doi.org/10.5067/G21LGCNLFSC5'}, {'inherited': True, 'rel': 'http://esipfed.org/ns/fedsearch/1.1/documentation#', 'hreflang': 'en-US', 'href': 'https://doi.org/10.5067/G21LGCNLFSC5'}]}, {'producer_granule_id': 'SnowEx17_GPR_Version2_Week2.csv', 'time_start': '2017-02-14T00:00:00.000Z', 'updated': '2019-11-20T14:19:39.156Z', 'dataset_id': 'SnowEx17 Ground Penetrating Radar V002', 'data_center': 'NSIDC_ECS', 'title': 'SC:SNEX17_GPR.002:167128520', 'coordinate_system': 'GEODETIC', 'day_night_flag': 'UNSPECIFIED', 'time_end': '2017-02-17T23:59:59.000Z', 'id': 'G1657541238-NSIDC_ECS', 'original_format': 'ECHO10', 'granule_size': '85.516', 'browse_flag': False, 'polygons': [['39.10738 -107.88943 39.10738 -107.89539 39.0912 -107.95508 39.07271 -108.02372 39.0542 -108.09234 39.04264 -108.16078 39.0357 -108.2113 39.03338 -108.2113 39.0195 -108.20533 39.00099 -108.18454 39.00099 -108.12811 39.00099 -108.08653 39.02644 -108.02094 39.0357 -107.94938 39.02413 -107.93155 39.04726 -107.89867 39.08195 -107.85677 39.10507 -107.86257 39.10969 -107.88644 39.10738 -107.88943']], 'collection_concept_id': 'C1655875737-NSIDC_ECS', 'online_access_flag': True, 'links': [{'rel': 'http://esipfed.org/ns/fedsearch/1.1/data#', 'type': 'text/plain', 'hreflang': 'en-US', 'href': 'https://n5eil01u.ecs.nsidc.org/DP1/SNOWEX/SNEX17_GPR.002/2017.02.14/SnowEx17_GPR_Version2_Week2.csv'}, {'rel': 'http://esipfed.org/ns/fedsearch/1.1/metadata#', 'type': 'text/xml', 'title': '(METADATA)', 'hreflang': 'en-US', 'href': 'https://n5eil01u.ecs.nsidc.org/DP1/SNOWEX/SNEX17_GPR.002/2017.02.14/SnowEx17_GPR_Version2_Week2.csv.xml'}, {'inherited': True, 'length': '0.0KB', 'rel': 'http://esipfed.org/ns/fedsearch/1.1/data#', 'hreflang': 'en-US', 'href': 'https://n5eil01u.ecs.nsidc.org/SNOWEX/SNEX17_GPR.002/'}, {'inherited': True, 'length': '0.0KB', 'rel': 'http://esipfed.org/ns/fedsearch/1.1/data#', 'hreflang': 'en-US', 'href': 'https://search.earthdata.nasa.gov/search/granules?p=C1655875737-NSIDC_ECS&q=SNEX17_GPR&m=29.76382409255042!-108.823974609375!4!1!0!0%2C2&tl=1558474061!4!!'}, {'inherited': True, 'length': '0.0KB', 'rel': 'http://esipfed.org/ns/fedsearch/1.1/data#', 'hreflang': 'en-US', 'href': 'https://nsidc.org/data/data-access-tool/SNEX17_GPR/versions/2/'}, {'inherited': True, 'rel': 'http://esipfed.org/ns/fedsearch/1.1/metadata#', 'hreflang': 'en-US', 'href': 'https://doi.org/10.5067/G21LGCNLFSC5'}, {'inherited': True, 'rel': 'http://esipfed.org/ns/fedsearch/1.1/documentation#', 'hreflang': 'en-US', 'href': 'https://doi.org/10.5067/G21LGCNLFSC5'}]}, {'producer_granule_id': 'SnowEx17_GPR_Version2_Week3.csv', 'time_start': '2017-02-21T00:00:00.000Z', 'updated': '2020-02-18T12:25:16.785Z', 'dataset_id': 'SnowEx17 Ground Penetrating Radar V002', 'data_center': 'NSIDC_ECS', 'title': 'SC:SNEX17_GPR.002:173252482', 'coordinate_system': 'GEODETIC', 'day_night_flag': 'UNSPECIFIED', 'time_end': '2017-02-25T23:59:59.000Z', 'id': 'G1694922459-NSIDC_ECS', 'original_format': 'ECHO10', 'granule_size': '66.3598', 'browse_flag': False, 'polygons': [['39.05189 -108.06789 39.04958 -108.06792 39.03107 -108.08616 39.0195 -108.15531 39.00331 -108.14352 39.00562 -108.11049 39.00562 -108.05349 39.01719 -108.05334 39.02876 -108.02919 39.0542 -108.05586 39.0542 -108.06786 39.05189 -108.06789']], 'collection_concept_id': 'C1655875737-NSIDC_ECS', 'online_access_flag': True, 'links': [{'rel': 'http://esipfed.org/ns/fedsearch/1.1/data#', 'type': 'text/plain', 'hreflang': 'en-US', 'href': 'https://n5eil01u.ecs.nsidc.org/DP1/SNOWEX/SNEX17_GPR.002/2017.02.21/SnowEx17_GPR_Version2_Week3.csv'}, {'rel': 'http://esipfed.org/ns/fedsearch/1.1/metadata#', 'type': 'text/xml', 'title': '(METADATA)', 'hreflang': 'en-US', 'href': 'https://n5eil01u.ecs.nsidc.org/DP1/SNOWEX/SNEX17_GPR.002/2017.02.21/SnowEx17_GPR_Version2_Week3.csv.xml'}, {'inherited': True, 'length': '0.0KB', 'rel': 'http://esipfed.org/ns/fedsearch/1.1/data#', 'hreflang': 'en-US', 'href': 'https://n5eil01u.ecs.nsidc.org/SNOWEX/SNEX17_GPR.002/'}, {'inherited': True, 'length': '0.0KB', 'rel': 'http://esipfed.org/ns/fedsearch/1.1/data#', 'hreflang': 'en-US', 'href': 'https://search.earthdata.nasa.gov/search/granules?p=C1655875737-NSIDC_ECS&q=SNEX17_GPR&m=29.76382409255042!-108.823974609375!4!1!0!0%2C2&tl=1558474061!4!!'}, {'inherited': True, 'length': '0.0KB', 'rel': 'http://esipfed.org/ns/fedsearch/1.1/data#', 'hreflang': 'en-US', 'href': 'https://nsidc.org/data/data-access-tool/SNEX17_GPR/versions/2/'}, {'inherited': True, 'rel': 'http://esipfed.org/ns/fedsearch/1.1/metadata#', 'hreflang': 'en-US', 'href': 'https://doi.org/10.5067/G21LGCNLFSC5'}, {'inherited': True, 'rel': 'http://esipfed.org/ns/fedsearch/1.1/documentation#', 'hreflang': 'en-US', 'href': 'https://doi.org/10.5067/G21LGCNLFSC5'}]}]}}\nhttps://n5eil02u.ecs.nsidc.org/egi/request?short_name=SNEX17_GPR&version=2&polygon=-108.2352445938561,38.98556907427165,-107.85284607930835,38.978765032966244,-107.85494925720668,39.10596902171742,-108.22772795408136,39.11294532581687,-108.2352445938561,38.98556907427165&temporal=2017-01-01T00:00:00Z,2017-12-31T23:59:59Z&request_mode=async&agent=NO&INCLUDE_META=N\nOrder status URL:  https://n5eil02u.ecs.nsidc.org/egi/request/5000002721511\nJob status is  complete\nZip download URL:  https://n5eil02u.ecs.nsidc.org/esir/5000002721511.zip\nBeginning download of zipped output...\nDownload is complete.\n",
  "history_begin_time" : 1642579757701,
  "history_end_time" : 1642579772625,
  "history_notes" : null,
  "history_process" : "li3z29",
  "host_id" : "100001",
  "indicator" : "Done"
},{
  "history_id" : "mql01z4iwg3",
  "history_input" : "from snowex_nsidc_search import * \n\n\n\n#Set NSIDC data access base URL\nbase_url = 'https://n5eil02u.ecs.nsidc.org/egi/request'\n\n#Set the request mode to asynchronous, \"no\" processing agent (no subsetting or reformatting services available), and optionally removing metadata delivery\n\nparam_dict['request_mode'] = 'async'\nparam_dict['agent'] = 'NO'\nparam_dict['INCLUDE_META'] ='N' #optional if you do not wish to receive the associated metadata files with each science file. \n\nparam_string = '&'.join(\"{!s}={!r}\".format(k,v) for (k,v) in param_dict.items()) # Convert param_dict to string\nparam_string = param_string.replace(\"'\",\"\") # Remove quotes\n\napi_list = [f'{base_url}?{param_string}']\napi_request = api_list[0]\nprint(api_request) # Print API base URL + request parameters\n\n# Start authenticated session with Earthdata Login to allow for data downloads:\ndef setup_earthdata_login_auth(endpoint: str='urs.earthdata.nasa.gov'):\n    netrc_name = \"_netrc\" if system()==\"Windows\" else \".netrc\"\n    try:\n        username, _, password = netrc.netrc(file=join(expanduser('~'), netrc_name)).authenticators(endpoint)\n    except (FileNotFoundError, TypeError):\n        print('Please provide your Earthdata Login credentials for access.')\n        print('Your info will only be passed to %s and will not be exposed in Jupyter.' % (endpoint))\n        username = input('Username: ')\n        password = getpass('Password: ')\n    manager = request.HTTPPasswordMgrWithDefaultRealm()\n    manager.add_password(None, endpoint, username, password)\n    auth = request.HTTPBasicAuthHandler(manager)\n    jar = CookieJar()\n    processor = request.HTTPCookieProcessor(jar)\n    opener = request.build_opener(auth, processor)\n    request.install_opener(opener)\n\nsetup_earthdata_login_auth(endpoint=\"urs.earthdata.nasa.gov\")\n\n\ndef request_nsidc_data(API_request):\n    \"\"\"\n    Performs a data customization and access request from NSIDC's API/\n    Creates an output folder in the working directory if one does not already exist.\n    \n    :API_request: NSIDC API endpoint; see https://nsidc.org/support/how/how-do-i-programmatically-request-data-services for more info\n    on how to configure the API request.\n    \n    \"\"\"\n\n    path = str(f'{datadir}') # Create an output folder if the folder does not already exist.\n    if not os.path.exists(path):\n        os.mkdir(path)\n        \n    base_url = 'https://n5eil02u.ecs.nsidc.org/egi/request'\n\n    \n    r = request.urlopen(API_request)\n    esir_root = ET.fromstring(r.read())\n    orderlist = []   # Look up order ID\n    for order in esir_root.findall(\"./order/\"):\n        orderlist.append(order.text)\n    orderID = orderlist[0]\n    statusURL = base_url + '/' + orderID # Create status URL\n    print('Order status URL: ', statusURL)\n    request_response = request.urlopen(statusURL) # Find order status  \n    request_root = ET.fromstring(request_response.read())\n    statuslist = []\n    for status in request_root.findall(\"./requestStatus/\"):\n        statuslist.append(status.text)\n    status = statuslist[0]\n    while status == 'pending' or status == 'processing': #Continue loop while request is still processing\n        print('Job status is ', status,'. Trying again.')\n        time.sleep(10)\n        loop_response = request.urlopen(statusURL)\n        loop_root = ET.fromstring(loop_response.read())\n        statuslist = [] #find status\n        for status in loop_root.findall(\"./requestStatus/\"):\n            statuslist.append(status.text)\n        status = statuslist[0]\n        if status == 'pending' or status == 'processing':\n            continue\n    if status == 'complete_with_errors' or status == 'failed': # Provide complete_with_errors error message:\n        messagelist = []\n        for message in loop_root.findall(\"./processInfo/\"):\n            messagelist.append(message.text)\n        print('Job status is ', status)\n        print('error messages:')\n        pprint(messagelist)\n    if status == 'complete' or status == 'complete_with_errors':# Download zipped order if status is complete or complete_with_errors\n        downloadURL = 'https://n5eil02u.ecs.nsidc.org/esir/' + orderID + '.zip'\n        print('Job status is ', status)\n        print('Zip download URL: ', downloadURL)\n        print('Beginning download of zipped output...')\n        zip_response = request.urlopen(downloadURL)\n        with zipfile.ZipFile(io.BytesIO(zip_response.read())) as z:\n            z.extractall(path)\n        print('Download is complete.')\n    else: print('Request failed.')\n    \n    # Clean up Outputs folder by removing individual granule folders \n    for root, dirs, files in os.walk(path, topdown=False):\n        for file in files:\n            try:\n                shutil.move(os.path.join(root, file), path)\n            except OSError:\n                pass\n        for name in dirs:\n            os.rmdir(os.path.join(root, name))\n    return  \n\n\n# NOTE: downloads ~ 200MB of CSV files\nrequest_nsidc_data(api_request)",
  "history_output" : "Polygon coordinates to be used in search: -108.2352445938561,38.98556907427165,-107.85284607930835,38.978765032966244,-107.85494925720668,39.10596902171742,-108.22772795408136,39.11294532581687,-108.2352445938561,38.98556907427165\nFound 3 files\nThe total size of all files is 209.20 MB\n{'feed': {'updated': '2022-01-19T08:08:20.457Z', 'id': 'https://cmr.earthdata.nasa.gov:443/search/granules.json?short_name=SNEX17_GPR&version=2&polygon=-108.2352445938561%2C38.98556907427165%2C-107.85284607930835%2C38.978765032966244%2C-107.85494925720668%2C39.10596902171742%2C-108.22772795408136%2C39.11294532581687%2C-108.2352445938561%2C38.98556907427165&temporal=2017-01-01T00%3A00%3A00Z%2C2017-12-31T23%3A59%3A59Z', 'title': 'ECHO granule metadata', 'entry': [{'producer_granule_id': 'SnowEx17_GPR_Version2_Week1.csv', 'time_start': '2017-02-08T00:00:00.000Z', 'updated': '2019-11-20T14:19:39.156Z', 'dataset_id': 'SnowEx17 Ground Penetrating Radar V002', 'data_center': 'NSIDC_ECS', 'title': 'SC:SNEX17_GPR.002:167128516', 'coordinate_system': 'GEODETIC', 'day_night_flag': 'UNSPECIFIED', 'time_end': '2017-02-10T23:59:59.000Z', 'id': 'G1657541380-NSIDC_ECS', 'original_format': 'ECHO10', 'granule_size': '57.3195', 'browse_flag': False, 'polygons': [['39.05189 -108.06789 39.04958 -108.07092 39.02644 -108.13422 39.04032 -108.18504 39.0357 -108.2211 39.01719 -108.21534 38.99637 -108.18261 39.00562 -108.11049 39.02413 -108.06225 39.03338 -108.06213 39.02876 -108.08619 39.04264 -108.05301 39.05189 -108.05289 39.0542 -108.06786 39.05189 -108.06789']], 'collection_concept_id': 'C1655875737-NSIDC_ECS', 'online_access_flag': True, 'links': [{'rel': 'http://esipfed.org/ns/fedsearch/1.1/data#', 'type': 'text/plain', 'hreflang': 'en-US', 'href': 'https://n5eil01u.ecs.nsidc.org/DP1/SNOWEX/SNEX17_GPR.002/2017.02.08/SnowEx17_GPR_Version2_Week1.csv'}, {'rel': 'http://esipfed.org/ns/fedsearch/1.1/metadata#', 'type': 'text/xml', 'title': '(METADATA)', 'hreflang': 'en-US', 'href': 'https://n5eil01u.ecs.nsidc.org/DP1/SNOWEX/SNEX17_GPR.002/2017.02.08/SnowEx17_GPR_Version2_Week1.csv.xml'}, {'inherited': True, 'length': '0.0KB', 'rel': 'http://esipfed.org/ns/fedsearch/1.1/data#', 'hreflang': 'en-US', 'href': 'https://n5eil01u.ecs.nsidc.org/SNOWEX/SNEX17_GPR.002/'}, {'inherited': True, 'length': '0.0KB', 'rel': 'http://esipfed.org/ns/fedsearch/1.1/data#', 'hreflang': 'en-US', 'href': 'https://search.earthdata.nasa.gov/search/granules?p=C1655875737-NSIDC_ECS&q=SNEX17_GPR&m=29.76382409255042!-108.823974609375!4!1!0!0%2C2&tl=1558474061!4!!'}, {'inherited': True, 'length': '0.0KB', 'rel': 'http://esipfed.org/ns/fedsearch/1.1/data#', 'hreflang': 'en-US', 'href': 'https://nsidc.org/data/data-access-tool/SNEX17_GPR/versions/2/'}, {'inherited': True, 'rel': 'http://esipfed.org/ns/fedsearch/1.1/metadata#', 'hreflang': 'en-US', 'href': 'https://doi.org/10.5067/G21LGCNLFSC5'}, {'inherited': True, 'rel': 'http://esipfed.org/ns/fedsearch/1.1/documentation#', 'hreflang': 'en-US', 'href': 'https://doi.org/10.5067/G21LGCNLFSC5'}]}, {'producer_granule_id': 'SnowEx17_GPR_Version2_Week2.csv', 'time_start': '2017-02-14T00:00:00.000Z', 'updated': '2019-11-20T14:19:39.156Z', 'dataset_id': 'SnowEx17 Ground Penetrating Radar V002', 'data_center': 'NSIDC_ECS', 'title': 'SC:SNEX17_GPR.002:167128520', 'coordinate_system': 'GEODETIC', 'day_night_flag': 'UNSPECIFIED', 'time_end': '2017-02-17T23:59:59.000Z', 'id': 'G1657541238-NSIDC_ECS', 'original_format': 'ECHO10', 'granule_size': '85.516', 'browse_flag': False, 'polygons': [['39.10738 -107.88943 39.10738 -107.89539 39.0912 -107.95508 39.07271 -108.02372 39.0542 -108.09234 39.04264 -108.16078 39.0357 -108.2113 39.03338 -108.2113 39.0195 -108.20533 39.00099 -108.18454 39.00099 -108.12811 39.00099 -108.08653 39.02644 -108.02094 39.0357 -107.94938 39.02413 -107.93155 39.04726 -107.89867 39.08195 -107.85677 39.10507 -107.86257 39.10969 -107.88644 39.10738 -107.88943']], 'collection_concept_id': 'C1655875737-NSIDC_ECS', 'online_access_flag': True, 'links': [{'rel': 'http://esipfed.org/ns/fedsearch/1.1/data#', 'type': 'text/plain', 'hreflang': 'en-US', 'href': 'https://n5eil01u.ecs.nsidc.org/DP1/SNOWEX/SNEX17_GPR.002/2017.02.14/SnowEx17_GPR_Version2_Week2.csv'}, {'rel': 'http://esipfed.org/ns/fedsearch/1.1/metadata#', 'type': 'text/xml', 'title': '(METADATA)', 'hreflang': 'en-US', 'href': 'https://n5eil01u.ecs.nsidc.org/DP1/SNOWEX/SNEX17_GPR.002/2017.02.14/SnowEx17_GPR_Version2_Week2.csv.xml'}, {'inherited': True, 'length': '0.0KB', 'rel': 'http://esipfed.org/ns/fedsearch/1.1/data#', 'hreflang': 'en-US', 'href': 'https://n5eil01u.ecs.nsidc.org/SNOWEX/SNEX17_GPR.002/'}, {'inherited': True, 'length': '0.0KB', 'rel': 'http://esipfed.org/ns/fedsearch/1.1/data#', 'hreflang': 'en-US', 'href': 'https://search.earthdata.nasa.gov/search/granules?p=C1655875737-NSIDC_ECS&q=SNEX17_GPR&m=29.76382409255042!-108.823974609375!4!1!0!0%2C2&tl=1558474061!4!!'}, {'inherited': True, 'length': '0.0KB', 'rel': 'http://esipfed.org/ns/fedsearch/1.1/data#', 'hreflang': 'en-US', 'href': 'https://nsidc.org/data/data-access-tool/SNEX17_GPR/versions/2/'}, {'inherited': True, 'rel': 'http://esipfed.org/ns/fedsearch/1.1/metadata#', 'hreflang': 'en-US', 'href': 'https://doi.org/10.5067/G21LGCNLFSC5'}, {'inherited': True, 'rel': 'http://esipfed.org/ns/fedsearch/1.1/documentation#', 'hreflang': 'en-US', 'href': 'https://doi.org/10.5067/G21LGCNLFSC5'}]}, {'producer_granule_id': 'SnowEx17_GPR_Version2_Week3.csv', 'time_start': '2017-02-21T00:00:00.000Z', 'updated': '2020-02-18T12:25:16.785Z', 'dataset_id': 'SnowEx17 Ground Penetrating Radar V002', 'data_center': 'NSIDC_ECS', 'title': 'SC:SNEX17_GPR.002:173252482', 'coordinate_system': 'GEODETIC', 'day_night_flag': 'UNSPECIFIED', 'time_end': '2017-02-25T23:59:59.000Z', 'id': 'G1694922459-NSIDC_ECS', 'original_format': 'ECHO10', 'granule_size': '66.3598', 'browse_flag': False, 'polygons': [['39.05189 -108.06789 39.04958 -108.06792 39.03107 -108.08616 39.0195 -108.15531 39.00331 -108.14352 39.00562 -108.11049 39.00562 -108.05349 39.01719 -108.05334 39.02876 -108.02919 39.0542 -108.05586 39.0542 -108.06786 39.05189 -108.06789']], 'collection_concept_id': 'C1655875737-NSIDC_ECS', 'online_access_flag': True, 'links': [{'rel': 'http://esipfed.org/ns/fedsearch/1.1/data#', 'type': 'text/plain', 'hreflang': 'en-US', 'href': 'https://n5eil01u.ecs.nsidc.org/DP1/SNOWEX/SNEX17_GPR.002/2017.02.21/SnowEx17_GPR_Version2_Week3.csv'}, {'rel': 'http://esipfed.org/ns/fedsearch/1.1/metadata#', 'type': 'text/xml', 'title': '(METADATA)', 'hreflang': 'en-US', 'href': 'https://n5eil01u.ecs.nsidc.org/DP1/SNOWEX/SNEX17_GPR.002/2017.02.21/SnowEx17_GPR_Version2_Week3.csv.xml'}, {'inherited': True, 'length': '0.0KB', 'rel': 'http://esipfed.org/ns/fedsearch/1.1/data#', 'hreflang': 'en-US', 'href': 'https://n5eil01u.ecs.nsidc.org/SNOWEX/SNEX17_GPR.002/'}, {'inherited': True, 'length': '0.0KB', 'rel': 'http://esipfed.org/ns/fedsearch/1.1/data#', 'hreflang': 'en-US', 'href': 'https://search.earthdata.nasa.gov/search/granules?p=C1655875737-NSIDC_ECS&q=SNEX17_GPR&m=29.76382409255042!-108.823974609375!4!1!0!0%2C2&tl=1558474061!4!!'}, {'inherited': True, 'length': '0.0KB', 'rel': 'http://esipfed.org/ns/fedsearch/1.1/data#', 'hreflang': 'en-US', 'href': 'https://nsidc.org/data/data-access-tool/SNEX17_GPR/versions/2/'}, {'inherited': True, 'rel': 'http://esipfed.org/ns/fedsearch/1.1/metadata#', 'hreflang': 'en-US', 'href': 'https://doi.org/10.5067/G21LGCNLFSC5'}, {'inherited': True, 'rel': 'http://esipfed.org/ns/fedsearch/1.1/documentation#', 'hreflang': 'en-US', 'href': 'https://doi.org/10.5067/G21LGCNLFSC5'}]}]}}\nhttps://n5eil02u.ecs.nsidc.org/egi/request?short_name=SNEX17_GPR&version=2&polygon=-108.2352445938561,38.98556907427165,-107.85284607930835,38.978765032966244,-107.85494925720668,39.10596902171742,-108.22772795408136,39.11294532581687,-108.2352445938561,38.98556907427165&temporal=2017-01-01T00:00:00Z,2017-12-31T23:59:59Z&request_mode=async&agent=NO&INCLUDE_META=N\nOrder status URL:  https://n5eil02u.ecs.nsidc.org/egi/request/5000002721510\nJob status is  complete\nZip download URL:  https://n5eil02u.ecs.nsidc.org/esir/5000002721510.zip\nBeginning download of zipped output...\nDownload is complete.\nTraceback (most recent call last):\n  File \"/Users/joe/gw-workspace/iBclPGbEFuG34bajrTMSS68l44/snowex_nsidc_download_api.py\", line 115, in <module>\n    request_nsidc_data(api_request)\n  File \"/Users/joe/gw-workspace/iBclPGbEFuG34bajrTMSS68l44/snowex_nsidc_download_api.py\", line 110, in request_nsidc_data\n    os.rmdir(os.path.join(root, name))\nOSError: [Errno 66] Directory not empty: '/Users/joe/Documents/data/173252482'\n",
  "history_begin_time" : 1642579699566,
  "history_end_time" : 1642579714433,
  "history_notes" : null,
  "history_process" : "li3z29",
  "host_id" : "100001",
  "indicator" : "Done"
},]
